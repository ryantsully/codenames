{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  let [words, setWords] = useState([]);\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [gameNotFound, setGameNotFound] = useState(false);\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n  const displayCode = '';\n  const socket = io('http://127.0.0.1:5000');\n  socket.on('update_word_color_mapping', data => {\n    console.log(\"New activity found on server, refreshing stuff\");\n    setWordColorMapping(data['word_color_mapping']);\n    setCurrentTurn(data['currentTurn']);\n    setBlueScore(data['blueScore']);\n    setRedScore(data['redScore']);\n    setGameStarted(data['gameStarted']);\n    setGameOver(data['gameOver']);\n    setWinnerMessage(data['winnerMessage']);\n    setJoinCode(data['room_code']);\n  });\n  const createGame = async () => {\n    console.log(\"Create new game\");\n    try {\n      setGameNotFound(false);\n      const response = await fetch(`http://127.0.0.1:5000/create_new_game`);\n      if (!response) {\n        throw new Error('Create game didnt work');\n      }\n      const data = await response.json();\n      console.log(\"New game data received from server\", data);\n      setWordColorMapping(data);\n    } catch (error) {\n      console.log(\"There was an error with create new game\");\n    }\n  };\n  const createSubsequentGame = async joinCode => {\n    console.log(\"Create sub game\");\n    console.log(joinCode);\n    try {\n      setGameNotFound(false);\n      const response = await fetch(`http://127.0.0.1:5000/create_subsequent_game/${joinCode}`);\n      if (!response) {\n        throw new Error('Create game didnt work');\n      }\n      const data = await response.json();\n      console.log(\"New game data received from server\", data);\n      setWordColorMapping(data);\n      setJoinCode(data['room_code']);\n    } catch (error) {\n      console.log(\"There was an error with create new game\");\n    }\n  };\n  const joinGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/join_game/${joinCode}`);\n      if (!response) {\n        throw new Error('Join didnt work');\n      }\n      const data = await response.json();\n      console.log(data);\n      setGameNotFound(false);\n      setGameStarted(true);\n      setWordColorMapping(data);\n    } catch (error) {\n      console.log(\"There was an error with join game\");\n      setGameNotFound(true);\n    }\n  };\n  const updateGridOnServer = async updatedWordColorMapping => {\n    console.log(\"updateGridOnServer begun\");\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/click_event/${updatedWordColorMapping['room_code']}`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          word_color_mapping: updatedWordColorMapping['word_color_mapping'],\n          blueScore: updatedWordColorMapping['blueScore'],\n          redScore: updatedWordColorMapping['redScore'],\n          currentTurn: updatedWordColorMapping['currentTurn'],\n          gameStarted: updatedWordColorMapping['gameStarted'],\n          gameOver: updatedWordColorMapping['gameOver'],\n          winnerMessage: updatedWordColorMapping['winnerMessage'],\n          room_code: joinCode,\n          clicked_cells: clickedCells\n        })\n      });\n      console.log(\"updateGridOnServer completed\");\n    } catch (error) {\n      console.log(\"There was an error with retrieving updated grid from server\");\n    }\n  };\n  useEffect(() => {\n    if (wordColorMapping.length !== 0) {\n      console.log(\"useEffect triggered\");\n      setWords(Object.keys(wordColorMapping['word_color_mapping']));\n      setJoinCode(wordColorMapping[\"room_code\"]);\n      setWordColorMapping(wordColorMapping);\n    }\n  }, [wordColorMapping]);\n  useEffect(() => {\n    if (clickedCells.length !== 0) {\n      console.log(\"Second useEffect triggered\");\n      wordColorMapping['blueScore'] = blueScore;\n      wordColorMapping['redScore'] = redScore;\n      wordColorMapping['currentTurn'] = currentTurn;\n      wordColorMapping['gameStarted'] = gameStarted;\n      wordColorMapping['gameOver'] = gameOver;\n      wordColorMapping['winnerMessage'] = winnerMessage;\n      setWords(Object.keys(wordColorMapping['word_color_mapping']));\n      updateGridOnServer(wordColorMapping);\n    }\n  }, [blueScore, redScore, currentTurn, gameStarted, gameOver, winnerMessage]);\n  useEffect(() => {\n    if (joinCode !== '') {\n      socket.emit('join-room', joinCode);\n    }\n  }, [joinCode]);\n  function getKeyByPosition(obj, position) {\n    for (const key in obj) {\n      if (obj[key].position === position) {\n        return key;\n      }\n    }\n    return null;\n  }\n  function createGrid(wordColorMapping) {\n    if (wordColorMapping !== null) {\n      const numRows = 5;\n      const numColumns = 5;\n      let grid = [];\n      for (let row = 0; row < numRows; row++) {\n        // Loop through the rows\n        let rowCells = [];\n        for (let column = 0; column < numColumns; column++) {\n          let key = row + 1 + column * 5;\n          let word = getKeyByPosition(wordColorMapping['word_color_mapping'], key);\n          // CANNOT READ PROPERTIES OF UNDEFINED 'color'\n          let color = wordColorMapping['word_color_mapping'][word]['color'];\n          let clicked = wordColorMapping['word_color_mapping'][word]['clicked'];\n          let cellStyle = {\n            backgroundColor: 'white',\n            boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)'\n          };\n          if (spymasterMode || clicked) {\n            cellStyle.backgroundColor = color === 'neutral' ? color === 'black' ? 'black' : 'lightgrey' : color;\n            cellStyle.color = color === 'neutral' ? 'black' : 'white';\n          }\n          const cell = /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"box\",\n            style: cellStyle,\n            onClick: () => handleCellClick(key),\n            children: word\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 24\n          }, this); // Create a cell\n          rowCells.push(cell); //Add Cell to row\n        }\n\n        grid.push(rowCells); //Add row to grid\n      }\n\n      return grid;\n    }\n  }\n  const handleCellClick = index => {\n    if (gameOver || spymasterMode || clickedCells[index]) {\n      console.log(\"cell\", index, \"clicked! Do nothing since game over, spymaster mode, or cell already clicked\");\n      return;\n    }\n    let word = getKeyByPosition(wordColorMapping['word_color_mapping'], index);\n    let color = wordColorMapping['word_color_mapping'][word].color;\n    wordColorMapping['word_color_mapping'][word].clicked = true;\n    console.log(\"Click event detected\");\n    if (color === 'black') {\n      if (currentTurn === 'blue') {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n        setGameOver(true);\n      } else {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n        setGameOver(true);\n      }\n      setGameOver(true);\n    } else if (color === 'blue') {\n      setBlueScore(blueScore + 1);\n      if (blueScore + 1 === BLUE_WORD_COUNT) {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n        setGameOver(true);\n        updateGridOnServer(wordColorMapping);\n      }\n    } else if (color === 'red') {\n      setRedScore(redScore + 1);\n      if (redScore + 1 === RED_WORD_COUNT) {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n        setGameOver(true);\n        updateGridOnServer(wordColorMapping);\n      }\n    }\n    if (currentTurn !== color && color !== 'black') {\n      setCurrentTurn(prevTurn => prevTurn === 'blue' ? 'red' : 'blue');\n    }\n    setClickedCells(index);\n  };\n  const handleNewGame = async () => {\n    setClickedCells([]);\n    setWords([]);\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n    setGameNotFound(false);\n    {\n      !gameStarted && createGame();\n    }\n    {\n      gameStarted && createSubsequentGame(joinCode);\n    }\n  };\n  const handleJoinGame = async () => {\n    setGameNotFound(false);\n    joinGame(joinCode);\n  };\n  const handleToggleSpymasterMode = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n  const endTurn = () => {\n    if (currentTurn == 'red') {\n      setCurrentTurn('blue');\n    } else {\n      setCurrentTurn('red');\n    }\n  };\n  const leaveGame = () => {\n    setGameStarted(false);\n    setJoinCode('');\n  };\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [!gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pregame\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Code Names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pregame-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewGame,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"join-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinGame,\n            children: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"text\",\n            placeholder: \"Code\",\n            name: \"code\",\n            value: joinCode,\n            onChange: e => setJoinCode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }, this), gameNotFound && !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gamenotfound\",\n      children: [\" Game \", displayCode, \" Not found! \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameinfo\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Game Room: \", joinCode, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 36\n          }, this), \"Blue: \", remainingBlueWords, \" | Red: \", remainingRedWords, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 68\n          }, this), currentTurn === \"red\" && !gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"turn-indicator\",\n            children: [\"Turn: \", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"red\",\n              children: [\" \", currentTurn]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this), currentTurn === \"blue\" && !gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"turn-indicator\",\n            children: [\"Turn: \", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"blue\",\n              children: [\" \", currentTurn]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 17\n          }, this), gameOver && winner === \"red\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"turn-indicator\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"red\",\n              children: [\" \", winnerMessage]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 48\n          }, this), gameOver && winner === \"blue\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"turn-indicator\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"blue\",\n              children: [\" \", winnerMessage]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"codenames-board\",\n        children: words.length === 25 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"codenames-grid\",\n          children: createGrid(wordColorMapping)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttongroup\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleToggleSpymasterMode,\n          children: \"Spymaster Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: endTurn,\n          children: \"End Turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: leaveGame,\n          children: \"Leave Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"jmlUfKg1AVVEu2LXwm2Oyd1sqWY=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","words","setWords","joinCode","setJoinCode","clickedCells","setClickedCells","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameStarted","setGameStarted","gameOver","setGameOver","spymasterMode","setSpymasterMode","winner","setWinner","winnerMessage","setWinnerMessage","gameNotFound","setGameNotFound","BLUE_WORD_COUNT","RED_WORD_COUNT","displayCode","socket","on","data","console","log","createGame","response","fetch","Error","json","error","createSubsequentGame","joinGame","updateGridOnServer","updatedWordColorMapping","method","headers","body","JSON","stringify","word_color_mapping","room_code","clicked_cells","length","Object","keys","emit","getKeyByPosition","obj","position","key","createGrid","numRows","numColumns","grid","row","rowCells","column","word","color","clicked","cellStyle","backgroundColor","boxShadow","cell","className","style","onClick","handleCellClick","children","fileName","_jsxFileName","lineNumber","columnNumber","push","index","prevTurn","handleNewGame","handleJoinGame","handleToggleSpymasterMode","endTurn","leaveGame","calculateRemainingWords","teamScore","totalWords","remainingBlueWords","remainingRedWords","type","placeholder","name","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\n\nimport io from 'socket.io-client'\n\n\nconst CodeNames = () => {\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  let [words, setWords] = useState([]);\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false)\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [gameNotFound, setGameNotFound] = useState(false);\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n  const displayCode = '';\n\n  const socket = io('http://127.0.0.1:5000');\n\n  socket.on('update_word_color_mapping', (data) => {\n    console.log(\"New activity found on server, refreshing stuff\")\n    setWordColorMapping(data['word_color_mapping'])\n    setCurrentTurn(data['currentTurn'])\n    setBlueScore(data['blueScore'])\n    setRedScore(data['redScore'])\n    setGameStarted(data['gameStarted'])\n    setGameOver(data['gameOver'])\n    setWinnerMessage(data['winnerMessage'])\n    setJoinCode(data['room_code'])\n  });\n\n  const createGame = async () => {\n    console.log(\"Create new game\")\n    try {\n      setGameNotFound(false)\n      const response = await fetch(`http://127.0.0.1:5000/create_new_game`)\n      if (!response) {\n        throw new Error('Create game didnt work')\n      }\n      const data = await response.json();\n      console.log(\"New game data received from server\", data)\n      setWordColorMapping(data);\n    }\n    catch (error) {\n      console.log(\"There was an error with create new game\")\n    }\n  }\n\n  const createSubsequentGame = async (joinCode) => {\n    console.log(\"Create sub game\")\n    console.log(joinCode)\n    try {\n      setGameNotFound(false)\n      const response = await fetch(`http://127.0.0.1:5000/create_subsequent_game/${joinCode}`)\n      if (!response) {\n        throw new Error('Create game didnt work')\n      }\n      const data = await response.json();\n      console.log(\"New game data received from server\", data)\n      setWordColorMapping(data);\n      setJoinCode(data['room_code'])\n    }\n    catch (error) {\n      console.log(\"There was an error with create new game\")\n    }\n  }\n\n  const joinGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/join_game/${joinCode}`)\n      if (!response) {\n        throw new Error('Join didnt work')\n      }\n      const data = await response.json();\n      console.log(data)\n      setGameNotFound(false);\n      setGameStarted(true);\n      setWordColorMapping(data);\n    }\n    catch (error) {\n      console.log(\"There was an error with join game\")\n      setGameNotFound(true)\n    }\n  }\n\n  const updateGridOnServer = async (updatedWordColorMapping) => {\n    console.log(\"updateGridOnServer begun\")\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/click_event/${updatedWordColorMapping['room_code']}`, {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(\n          {\n            word_color_mapping: updatedWordColorMapping['word_color_mapping'],\n            blueScore: updatedWordColorMapping['blueScore'],\n            redScore: updatedWordColorMapping['redScore'],\n            currentTurn: updatedWordColorMapping['currentTurn'],\n            gameStarted: updatedWordColorMapping['gameStarted'],\n            gameOver: updatedWordColorMapping['gameOver'],\n            winnerMessage: updatedWordColorMapping['winnerMessage'],\n            room_code: joinCode,\n            clicked_cells: clickedCells\n          }\n        )\n      })\n      console.log(\"updateGridOnServer completed\")\n    }\n    catch (error) {\n      console.log(\"There was an error with retrieving updated grid from server\")\n    }\n  }\n\n  useEffect(() => {\n    if (wordColorMapping.length !== 0) {\n      console.log(\"useEffect triggered\")\n      setWords(Object.keys(wordColorMapping['word_color_mapping']))\n      setJoinCode(wordColorMapping[\"room_code\"])\n      setWordColorMapping(wordColorMapping)\n    }\n  }, [wordColorMapping]);\n\n  useEffect(() => {\n    if (clickedCells.length !== 0) {\n      console.log(\"Second useEffect triggered\")\n      wordColorMapping['blueScore'] = blueScore\n      wordColorMapping['redScore'] = redScore\n      wordColorMapping['currentTurn'] = currentTurn\n      wordColorMapping['gameStarted'] = gameStarted\n      wordColorMapping['gameOver'] = gameOver\n      wordColorMapping['winnerMessage'] = winnerMessage\n      setWords(Object.keys(wordColorMapping['word_color_mapping']))\n      updateGridOnServer(wordColorMapping)\n    }\n  }, [blueScore, redScore, currentTurn, gameStarted, gameOver, winnerMessage]);\n\n  useEffect(() => {\n    if (joinCode !== '') {\n      socket.emit('join-room', joinCode)\n    }\n  }, [joinCode])\n\n\n  function getKeyByPosition(obj, position) {\n    for (const key in obj) {\n      if (obj[key].position === position) {\n        return key;\n      }\n    }\n    return null;\n  }\n\n  function createGrid(wordColorMapping) {\n    if (wordColorMapping !== null) {\n      const numRows = 5;\n      const numColumns = 5;\n      let grid = [];\n      for (let row = 0; row < numRows; row++) {     // Loop through the rows\n        let rowCells = [];\n        for (let column = 0; column < numColumns; column++) {\n          let key = (row + 1) + (column * 5)\n          let word = getKeyByPosition(wordColorMapping['word_color_mapping'], key)\n          // CANNOT READ PROPERTIES OF UNDEFINED 'color'\n          let color = wordColorMapping['word_color_mapping'][word]['color']\n          let clicked = wordColorMapping['word_color_mapping'][word]['clicked']\n          let cellStyle = {\n            backgroundColor: 'white',\n            boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n          };\n          if (spymasterMode || clicked) {\n            cellStyle.backgroundColor =\n              color === 'neutral' ? (color === 'black' ? 'black' : 'lightgrey') : color;\n            cellStyle.color = color === 'neutral' ? 'black' : 'white';\n          }\n          const cell = <div key={key}\n            className=\"box\"\n            style={cellStyle}\n            onClick={() => handleCellClick(key)}>\n            {word}</div>; // Create a cell\n          rowCells.push(cell); //Add Cell to row\n        }\n        grid.push(rowCells); //Add row to grid\n      }\n      return grid\n    }\n  }\n\n  const handleCellClick = (index) => {\n    if (gameOver || spymasterMode || clickedCells[index]) {\n      console.log(\"cell\", index, \"clicked! Do nothing since game over, spymaster mode, or cell already clicked\")\n      return;\n    }\n    let word = getKeyByPosition(wordColorMapping['word_color_mapping'], index)\n    let color = wordColorMapping['word_color_mapping'][word].color\n    wordColorMapping['word_color_mapping'][word].clicked = true\n    console.log(\"Click event detected\")\n    if (color === 'black') {\n      if (currentTurn === 'blue') {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n        setGameOver(true);\n      }\n      else {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n        setGameOver(true);\n      }\n      setGameOver(true);\n    }\n    else if (color === 'blue') {\n      setBlueScore(blueScore + 1);\n      if (blueScore + 1 === BLUE_WORD_COUNT) {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n        setGameOver(true);\n        updateGridOnServer(wordColorMapping)\n      }\n    }\n    else if (color === 'red') {\n      setRedScore(redScore + 1);\n      if (redScore + 1 === RED_WORD_COUNT) {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n        setGameOver(true);\n        updateGridOnServer(wordColorMapping)\n      }\n    }\n    if (currentTurn !== color && color !== 'black') {\n      setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n    }\n    setClickedCells(index)\n  };\n\n  const handleNewGame = async () => {\n    setClickedCells([])\n    setWords([]);\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n    setGameNotFound(false)\n    {\n      !gameStarted &&\n        createGame()\n    }\n    {\n      gameStarted &&\n        createSubsequentGame(joinCode)\n    }\n  };\n\n  const handleJoinGame = async () => {\n    setGameNotFound(false)\n    joinGame(joinCode)\n  };\n\n  const handleToggleSpymasterMode = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n\n  const endTurn = () => {\n    if (currentTurn == 'red') {\n      setCurrentTurn('blue')\n    }\n    else { setCurrentTurn('red') }\n  }\n\n  const leaveGame = () => {\n    setGameStarted(false)\n    setJoinCode('')\n  }\n\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n\n  return (\n\n    <div className=\"codenames\">\n\n      {!gameStarted &&\n        <div className=\"pregame\">\n          <h1>Code Names</h1>\n          <div className=\"pregame-buttons\">\n            <button onClick={handleNewGame}>Create Game</button>\n            <div className=\"join-game\">\n              <button onClick={handleJoinGame}>Join Game</button>\n              <input className=\"input\" type=\"text\" placeholder=\"Code\" name=\"code\" value={joinCode} onChange={(e) => setJoinCode(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n      }\n\n      {gameNotFound && !gameStarted &&\n        <div className=\"gamenotfound\"> Game {displayCode} Not found! </div>}\n\n      {gameStarted &&\n        <div>\n          <div className=\"gameinfo\">\n            <h4>\n              Game Room: {joinCode}<br />\n              Blue: {remainingBlueWords} | Red: {remainingRedWords}<br />\n\n              {currentTurn === \"red\" && !gameOver &&\n\n                <div className='turn-indicator'>\n                  Turn: <div className=\"red\"> {currentTurn}\n                  </div>\n                </div>\n              }\n              {currentTurn === \"blue\" && !gameOver &&\n                <div className='turn-indicator'>\n                  Turn: <div className=\"blue\"> {currentTurn}\n                  </div>\n                </div>\n\n              }\n              {gameOver && winner === \"red\" && <div className='turn-indicator'>\n                <div className=\"red\"> {winnerMessage}</div>\n              </div>}\n              {gameOver && winner === \"blue\" && <div className='turn-indicator'>\n                <div className=\"blue\"> {winnerMessage}</div>\n              </div>}\n\n            </h4>\n          </div>\n          <div />\n\n          <div className=\"codenames-board\">\n            {words.length === 25 &&\n              <div className=\"codenames-grid\">{createGrid(wordColorMapping)}</div>\n            }\n          </div>\n\n          <div className=\"buttongroup\">\n            <button onClick={handleNewGame}>New Game</button>\n            <button onClick={handleToggleSpymasterMode}>Spymaster Mode</button>\n            <button onClick={endTurn}>End Turn</button>\n            <button onClick={leaveGame}>Leave Room</button>\n          </div>\n        </div>\n      }\n    </div >\n  );\n};\n\nexport default CodeNames;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}