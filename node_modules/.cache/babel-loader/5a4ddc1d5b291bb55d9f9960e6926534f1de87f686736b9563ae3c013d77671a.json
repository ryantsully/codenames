{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport SocketingComponent from './SocketingComponent';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  const [codeEntered, setCodeEntered] = useState('');\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [fetchingData, setFetchingData] = useState(true);\n  const [initiateSocketingComponent, setInitiateSocketingComponent] = useState(false);\n  const [showTest, setShowTest] = useState(false);\n  const [words, setWords] = useState([]);\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n  const createGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/create_new_game`);\n      if (!response) {\n        throw new Error('Create game didnt work');\n      }\n      const data = await response.json();\n      setWordColorMapping(data).then(setWords(Object.keys(wordColorMapping['word_color_mapping'])));\n      console.log(words);\n    } catch (error) {\n      console.log(\"There was an error with create new game\");\n    }\n  };\n  const joinGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/join_game/${joinCode}`);\n      if (!response) {\n        throw new Error('Join didnt work');\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n    } catch (error) {\n      console.log(\"There was an error with join game\");\n    }\n  };\n\n  // This logs wordColor Mapping anytime it changes if it's length is > 0\n  useEffect(() => {\n    console.log(wordColorMapping.length);\n    if (wordColorMapping.length !== 0) {\n      setWords(Object.keys(wordColorMapping['word_color_mapping']));\n    }\n    ;\n  }, [wordColorMapping]);\n  const renderGrid = () => {\n    if (wordColorMapping === null) {\n      console.log('wordColorMapping is still null, cannot render the grid yet');\n      return null;\n    }\n    if (words.length !== 25) {\n      return null;\n    }\n    const grid = [];\n    let rowIndex = 0;\n    console.log(\"Time to render the grid!\");\n    //    wordColorMapping['word_color_mapping']\n    return null;\n  };\n\n  // for (let i = 0; i < 25; i += 5) {\n  //   const row = [];\n  //   for (let j = i; j < i + 5; j++) {\n  //     const { clicked, color, position } = wordColorMapping[words[j]];\n  //     let cellStyle = {\n  //       backgroundColor: 'white',\n  //       boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n  //     };\n\n  //     if (spymasterMode || clicked) {\n  //       cellStyle.backgroundColor =\n  //         color === 'neutral' ? (color === 'black' ? 'black' : 'lightgrey') : color;\n  //       cellStyle.color = 'white';\n  //     }\n\n  //     row.push(\n  //       <div\n  //         key={position}\n  //         className=\"box\"\n  //         style={cellStyle}\n  //         onClick={() => handleCellClick(position)}\n  //       >\n  //         {words[j]}\n  //       </div>\n  //     );\n  //   }\n\n  //   grid.push(\n  //     <div key={rowIndex} className=\"grid-row\">\n  //       {row}\n  //     </div>\n  //   );\n\n  //   rowIndex++;\n  // }\n\n  //   return grid;\n  // };\n\n  const handleCellClick = index => {\n    if (gameOver || spymasterMode && clickedCells[index]) {\n      return;\n    }\n    if (clickedCells[index]) {\n      return; // Cell has already been clicked\n    }\n\n    if (spymasterMode) {\n      return; // Disallow cell click in Spymaster Mode\n    }\n\n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n    if (wordColorMapping.length === 25) {\n      const {\n        color\n      } = wordColorMapping[index];\n      if (color === 'black') {\n        if (currentTurn === 'blue') {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n        } else {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n        }\n        setGameOver(true);\n      } else if (color === 'blue') {\n        setBlueScore(blueScore + 1);\n        if (blueScore + 1 === BLUE_WORD_COUNT) {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n          setGameOver(true);\n        }\n      } else if (color === 'red') {\n        setRedScore(redScore + 1);\n        if (redScore + 1 === RED_WORD_COUNT) {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n          setGameOver(true);\n        }\n      }\n      if (currentTurn !== color && color !== 'black') {\n        setCurrentTurn(prevTurn => prevTurn === 'blue' ? 'red' : 'blue');\n      }\n    }\n  };\n  const handleNewGame = async () => {\n    createGame();\n    setShowTest(true);\n    renderGrid();\n    setFetchingData(true);\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n    // setInitiateSocketingComponent(true);\n    setFetchingData(false);\n  };\n  const handleJoinGame = async () => {\n    joinGame(joinCode);\n    setShowTest(true);\n    // setFetchingData(true);\n    setGameStarted(true);\n    // await fetchWordsAndRenderBoard(joinCode);\n    // renderGrid();\n    // setInitiateSocketingComponent(true);\n\n    // setFetchingData(false);\n  };\n\n  const handleToggleSpymasterMode = () => {\n    console.log(clickedCells);\n    setSpymasterMode(!spymasterMode);\n  };\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pregame\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pregame-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewGame,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"join-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinGame,\n            children: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"text\",\n            placeholder: \"Code\",\n            name: \"code\",\n            onChange: e => setJoinCode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this), showTest && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"WORD COLOR MAPPING!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Game Room: \", joinCode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Remaining Words\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 30\n          }, this), \"Blue: \", remainingBlueWords, \" | Red: \", remainingRedWords]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"codenames-board\",\n          children: wordColorMapping.length === 25 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"codenames-grid\",\n            children: renderGrid()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNewGame,\n            children: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleToggleSpymasterMode,\n            children: \"Spymaster Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this), initiateSocketingComponent && /*#__PURE__*/_jsxDEV(SocketingComponent, {\n            wordColorMapping: wordColorMapping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Turn: \", currentTurn]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 27\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: winnerMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"Z2tDfjFAX+l6Ip2ZiDQeqxuM9Jk=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","SocketingComponent","io","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","codeEntered","setCodeEntered","joinCode","setJoinCode","clickedCells","setClickedCells","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameStarted","setGameStarted","gameOver","setGameOver","spymasterMode","setSpymasterMode","winner","setWinner","winnerMessage","setWinnerMessage","fetchingData","setFetchingData","initiateSocketingComponent","setInitiateSocketingComponent","showTest","setShowTest","words","setWords","BLUE_WORD_COUNT","RED_WORD_COUNT","createGame","response","fetch","Error","data","json","then","Object","keys","console","log","error","joinGame","length","renderGrid","grid","rowIndex","handleCellClick","index","updatedClickedCells","color","prevTurn","handleNewGame","handleJoinGame","handleToggleSpymasterMode","calculateRemainingWords","teamScore","totalWords","remainingBlueWords","remainingRedWords","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","name","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport SocketingComponent from './SocketingComponent';\nimport io from 'socket.io-client';\n\n\nconst CodeNames = () => {\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  const [codeEntered, setCodeEntered] = useState('');\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false)\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [fetchingData, setFetchingData] = useState(true);\n  const [initiateSocketingComponent, setInitiateSocketingComponent] = useState(false);\n  const [showTest, setShowTest] = useState(false)\n  const [words, setWords] = useState([])\n\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n\n  const createGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/create_new_game`)\n      if (!response) {\n        throw new Error('Create game didnt work')\n      }\n      const data = await response.json();\n      setWordColorMapping(data).then(\n        setWords(Object.keys(wordColorMapping['word_color_mapping']))\n      );\n      console.log(words)\n    }\n    catch (error) {\n      console.log(\"There was an error with create new game\")\n    }\n  }\n\n  const joinGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/join_game/${joinCode}`)\n      if (!response) {\n        throw new Error('Join didnt work')\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n    }\n    catch (error) {\n      console.log(\"There was an error with join game\")\n    }\n  }\n\n\n  // This logs wordColor Mapping anytime it changes if it's length is > 0\n  useEffect(() => {\n    console.log(wordColorMapping.length)\n    if (wordColorMapping.length !== 0) {\n      setWords(Object.keys(wordColorMapping['word_color_mapping']))\n    };\n  }, [wordColorMapping]);\n\n\n\n  const renderGrid = () => {\n    if (wordColorMapping === null) {\n      console.log('wordColorMapping is still null, cannot render the grid yet');\n      return null;\n    }\n\n    if (words.length !== 25) {\n      return null;\n    }\n\n    const grid = [];\n    let rowIndex = 0;\n    console.log(\"Time to render the grid!\")\n    //    wordColorMapping['word_color_mapping']\n    return null;\n  }\n\n  // for (let i = 0; i < 25; i += 5) {\n  //   const row = [];\n  //   for (let j = i; j < i + 5; j++) {\n  //     const { clicked, color, position } = wordColorMapping[words[j]];\n  //     let cellStyle = {\n  //       backgroundColor: 'white',\n  //       boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n  //     };\n\n  //     if (spymasterMode || clicked) {\n  //       cellStyle.backgroundColor =\n  //         color === 'neutral' ? (color === 'black' ? 'black' : 'lightgrey') : color;\n  //       cellStyle.color = 'white';\n  //     }\n\n  //     row.push(\n  //       <div\n  //         key={position}\n  //         className=\"box\"\n  //         style={cellStyle}\n  //         onClick={() => handleCellClick(position)}\n  //       >\n  //         {words[j]}\n  //       </div>\n  //     );\n  //   }\n\n  //   grid.push(\n  //     <div key={rowIndex} className=\"grid-row\">\n  //       {row}\n  //     </div>\n  //   );\n\n  //   rowIndex++;\n  // }\n\n  //   return grid;\n  // };\n\n\n  const handleCellClick = (index) => {\n    if (gameOver || (spymasterMode && clickedCells[index])) {\n      return;\n    }\n\n    if (clickedCells[index]) {\n      return; // Cell has already been clicked\n    }\n\n    if (spymasterMode) {\n      return; // Disallow cell click in Spymaster Mode\n    }\n\n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n\n    if (wordColorMapping.length === 25) {\n      const { color } = wordColorMapping[index];\n\n      if (color === 'black') {\n        if (currentTurn === 'blue') {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n        } else {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n        }\n        setGameOver(true);\n      } else if (color === 'blue') {\n        setBlueScore(blueScore + 1);\n        if (blueScore + 1 === BLUE_WORD_COUNT) {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n          setGameOver(true);\n        }\n      } else if (color === 'red') {\n        setRedScore(redScore + 1);\n        if (redScore + 1 === RED_WORD_COUNT) {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n          setGameOver(true);\n        }\n      }\n      if (currentTurn !== color && color !== 'black') {\n        setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n      }\n    }\n  };\n\n  const handleNewGame = async () => {\n    createGame();\n    setShowTest(true)\n    renderGrid()\n    setFetchingData(true);\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n    // setInitiateSocketingComponent(true);\n    setFetchingData(false);\n  };\n\n  const handleJoinGame = async () => {\n    joinGame(joinCode)\n    setShowTest(true)\n    // setFetchingData(true);\n    setGameStarted(true);\n    // await fetchWordsAndRenderBoard(joinCode);\n    // renderGrid();\n    // setInitiateSocketingComponent(true);\n\n    // setFetchingData(false);\n  };\n\n\n  const handleToggleSpymasterMode = () => {\n    console.log(clickedCells)\n    setSpymasterMode(!spymasterMode);\n  };\n\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n\n  return (\n\n    <div className=\"codenames\">\n\n      <h1>Code Names</h1>\n\n      {!gameStarted &&\n        <div className=\"pregame\">\n          <div className=\"pregame-buttons\">\n            <button onClick={handleNewGame}>Create Game</button>\n            <div className=\"join-game\">\n              <button onClick={handleJoinGame}>Join Game</button>\n              <input className=\"input\" type=\"text\" placeholder=\"Code\" name=\"code\" onChange={(e) => setJoinCode(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n      }\n\n      {showTest &&\n        <div>\n          <h1>\n            WORD COLOR MAPPING!\n          </h1>\n          {/* <p>{wordColorMapping}</p> */}\n        </div>\n      }\n\n      {gameStarted &&\n        <div>\n          <h2>Game Room: {joinCode}</h2>\n          <div>\n            <h4>\n              Remaining Words<br />\n              Blue: {remainingBlueWords} | Red: {remainingRedWords}\n            </h4>\n            <div className=\"codenames-board\">\n              {wordColorMapping.length === 25 &&\n                <div className=\"codenames-grid\">{renderGrid()}</div>}\n            </div>\n            <div>\n              <button onClick={handleNewGame}>Create Game</button>\n              <button onClick={handleToggleSpymasterMode}>Spymaster Mode</button>\n              {initiateSocketingComponent && <SocketingComponent wordColorMapping={wordColorMapping} />}\n            </div>\n            {!gameOver && <h4>Turn: {currentTurn}</h4>}\n            {gameOver && <h4>{winnerMessage}</h4>}\n          </div>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default CodeNames;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,cAAc;AACrB,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,IAAI,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,MAAM,CAAC;EACtD,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC0B,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAAC4B,MAAM,EAAEC,SAAS,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAAC8B,aAAa,EAAEC,gBAAgB,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgC,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkC,0BAA0B,EAAEC,6BAA6B,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EACnF,MAAM,CAACoC,QAAQ,EAAEC,WAAW,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACsC,KAAK,EAAEC,QAAQ,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMwC,eAAe,GAAG,CAAC;EACzB,MAAMC,cAAc,GAAG,CAAC;EAExB,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAsC,CAAC;MACrE,IAAI,CAACD,QAAQ,EAAE;QACb,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MACA,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;MAClCtC,mBAAmB,CAACqC,IAAI,CAAC,CAACE,IAAI,CAC5BT,QAAQ,CAACU,MAAM,CAACC,IAAI,CAAC1C,gBAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAC9D;MACD2C,OAAO,CAACC,GAAG,CAACd,KAAK,CAAC;IACpB,CAAC,CACD,OAAOe,KAAK,EAAE;MACZF,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACxD;EACF,CAAC;EAED,MAAME,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkChC,QAAS,EAAC,CAAC;MAC3E,IAAI,CAAC+B,QAAQ,EAAE;QACb,MAAM,IAAIE,KAAK,CAAC,iBAAiB,CAAC;MACpC;MACA,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;MAClCtC,mBAAmB,CAACqC,IAAI,CAAC;IAC3B,CAAC,CACD,OAAOO,KAAK,EAAE;MACZF,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD;EACF,CAAC;;EAGD;EACAnD,SAAS,CAAC,MAAM;IACdkD,OAAO,CAACC,GAAG,CAAC5C,gBAAgB,CAAC+C,MAAM,CAAC;IACpC,IAAI/C,gBAAgB,CAAC+C,MAAM,KAAK,CAAC,EAAE;MACjChB,QAAQ,CAACU,MAAM,CAACC,IAAI,CAAC1C,gBAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAC/D;IAAC;EACH,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EAItB,MAAMgD,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIhD,gBAAgB,KAAK,IAAI,EAAE;MAC7B2C,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;MACzE,OAAO,IAAI;IACb;IAEA,IAAId,KAAK,CAACiB,MAAM,KAAK,EAAE,EAAE;MACvB,OAAO,IAAI;IACb;IAEA,MAAME,IAAI,GAAG,EAAE;IACf,IAAIC,QAAQ,GAAG,CAAC;IAChBP,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAGA,MAAMO,eAAe,GAAIC,KAAK,IAAK;IACjC,IAAIpC,QAAQ,IAAKE,aAAa,IAAIZ,YAAY,CAAC8C,KAAK,CAAE,EAAE;MACtD;IACF;IAEA,IAAI9C,YAAY,CAAC8C,KAAK,CAAC,EAAE;MACvB,OAAO,CAAC;IACV;;IAEA,IAAIlC,aAAa,EAAE;MACjB,OAAO,CAAC;IACV;;IAEA,MAAMmC,mBAAmB,GAAG,CAAC,GAAG/C,YAAY,CAAC;IAC7C+C,mBAAmB,CAACD,KAAK,CAAC,GAAG,IAAI;IACjC7C,eAAe,CAAC8C,mBAAmB,CAAC;IAEpC,IAAIrD,gBAAgB,CAAC+C,MAAM,KAAK,EAAE,EAAE;MAClC,MAAM;QAAEO;MAAM,CAAC,GAAGtD,gBAAgB,CAACoD,KAAK,CAAC;MAEzC,IAAIE,KAAK,KAAK,OAAO,EAAE;QACrB,IAAI9C,WAAW,KAAK,MAAM,EAAE;UAC1Ba,SAAS,CAAC,KAAK,CAAC;UAChBE,gBAAgB,CAAC,WAAW,CAAC;QAC/B,CAAC,MAAM;UACLF,SAAS,CAAC,MAAM,CAAC;UACjBE,gBAAgB,CAAC,YAAY,CAAC;QAChC;QACAN,WAAW,CAAC,IAAI,CAAC;MACnB,CAAC,MAAM,IAAIqC,KAAK,KAAK,MAAM,EAAE;QAC3B3C,YAAY,CAACD,SAAS,GAAG,CAAC,CAAC;QAC3B,IAAIA,SAAS,GAAG,CAAC,KAAKsB,eAAe,EAAE;UACrCX,SAAS,CAAC,MAAM,CAAC;UACjBE,gBAAgB,CAAC,YAAY,CAAC;UAC9BN,WAAW,CAAC,IAAI,CAAC;QACnB;MACF,CAAC,MAAM,IAAIqC,KAAK,KAAK,KAAK,EAAE;QAC1BzC,WAAW,CAACD,QAAQ,GAAG,CAAC,CAAC;QACzB,IAAIA,QAAQ,GAAG,CAAC,KAAKqB,cAAc,EAAE;UACnCZ,SAAS,CAAC,KAAK,CAAC;UAChBE,gBAAgB,CAAC,WAAW,CAAC;UAC7BN,WAAW,CAAC,IAAI,CAAC;QACnB;MACF;MACA,IAAIT,WAAW,KAAK8C,KAAK,IAAIA,KAAK,KAAK,OAAO,EAAE;QAC9C7C,cAAc,CAAE8C,QAAQ,IAAMA,QAAQ,KAAK,MAAM,GAAG,KAAK,GAAG,MAAO,CAAC;MACtE;IACF;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChCtB,UAAU,EAAE;IACZL,WAAW,CAAC,IAAI,CAAC;IACjBmB,UAAU,EAAE;IACZvB,eAAe,CAAC,IAAI,CAAC;IACrBhB,cAAc,CAAC,MAAM,CAAC;IACtBE,YAAY,CAAC,CAAC,CAAC;IACfE,WAAW,CAAC,CAAC,CAAC;IACdI,WAAW,CAAC,KAAK,CAAC;IAClBF,cAAc,CAAC,IAAI,CAAC;IACpB;IACAU,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,MAAMgC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCX,QAAQ,CAAC1C,QAAQ,CAAC;IAClByB,WAAW,CAAC,IAAI,CAAC;IACjB;IACAd,cAAc,CAAC,IAAI,CAAC;IACpB;IACA;IACA;;IAEA;EACF,CAAC;;EAGD,MAAM2C,yBAAyB,GAAGA,CAAA,KAAM;IACtCf,OAAO,CAACC,GAAG,CAACtC,YAAY,CAAC;IACzBa,gBAAgB,CAAC,CAACD,aAAa,CAAC;EAClC,CAAC;EAED,MAAMyC,uBAAuB,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAK;IACzD,OAAOA,UAAU,GAAGD,SAAS;EAC/B,CAAC;EAED,MAAME,kBAAkB,GAAGH,uBAAuB,CAACjD,SAAS,EAAEsB,eAAe,CAAC;EAC9E,MAAM+B,iBAAiB,GAAGJ,uBAAuB,CAAC/C,QAAQ,EAAEqB,cAAc,CAAC;EAE3E,oBAEEpC,OAAA;IAAKmE,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAExBpE,OAAA;MAAAoE,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAElB,CAACvD,WAAW,iBACXjB,OAAA;MAAKmE,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtBpE,OAAA;QAAKmE,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9BpE,OAAA;UAAQyE,OAAO,EAAEd,aAAc;UAAAS,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eACpDxE,OAAA;UAAKmE,SAAS,EAAC,WAAW;UAAAC,QAAA,gBACxBpE,OAAA;YAAQyE,OAAO,EAAEb,cAAe;YAAAQ,QAAA,EAAC;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eACnDxE,OAAA;YAAOmE,SAAS,EAAC,OAAO;YAACO,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC,MAAM;YAACC,IAAI,EAAC,MAAM;YAACC,QAAQ,EAAGC,CAAC,IAAKtE,WAAW,CAACsE,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAC/G;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF,EAGPzC,QAAQ,iBACP/B,OAAA;MAAAoE,QAAA,eACEpE,OAAA;QAAAoE,QAAA,EAAI;MAEJ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAED,EAGPvD,WAAW,iBACVjB,OAAA;MAAAoE,QAAA,gBACEpE,OAAA;QAAAoE,QAAA,GAAI,aAAW,EAAC7D,QAAQ;MAAA;QAAA8D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAC9BxE,OAAA;QAAAoE,QAAA,gBACEpE,OAAA;UAAAoE,QAAA,GAAI,iBACa,eAAApE,OAAA;YAAAqE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,UACf,EAACP,kBAAkB,EAAC,UAAQ,EAACC,iBAAiB;QAAA;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACjD,eACLxE,OAAA;UAAKmE,SAAS,EAAC,iBAAiB;UAAAC,QAAA,EAC7BjE,gBAAgB,CAAC+C,MAAM,KAAK,EAAE,iBAC7BlD,OAAA;YAAKmE,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAEjB,UAAU;UAAE;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAO;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAClD,eACNxE,OAAA;UAAAoE,QAAA,gBACEpE,OAAA;YAAQyE,OAAO,EAAEd,aAAc;YAAAS,QAAA,EAAC;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eACpDxE,OAAA;YAAQyE,OAAO,EAAEZ,yBAA0B;YAAAO,QAAA,EAAC;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,EAClE3C,0BAA0B,iBAAI7B,OAAA,CAACH,kBAAkB;YAACM,gBAAgB,EAAEA;UAAiB;YAAAkE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAG;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACrF,EACL,CAACrD,QAAQ,iBAAInB,OAAA;UAAAoE,QAAA,GAAI,QAAM,EAACzD,WAAW;QAAA;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,EACzCrD,QAAQ,iBAAInB,OAAA;UAAAoE,QAAA,EAAK3C;QAAa;UAAA4C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEJ;AAEV,CAAC;AAACtE,EAAA,CArQID,SAAS;AAAAgF,EAAA,GAAThF,SAAS;AAuQf,eAAeA,SAAS;AAAC,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}