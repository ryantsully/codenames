{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  const [wordColorMapping, setWordColorMapping] = useState([]);\n  const [room, setRoom] = useState([]);\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [fetchingData, setFetchingData] = useState(true);\n  const [codeEntered, setCodeEntered] = useState('');\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n  useEffect(() => {\n    fetchWordColorMapping();\n  }, []);\n  const fetchWordColorMapping = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch word color mapping. Status: ${response.status} - ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log(data);\n      const room = data.room['room'];\n      console.log(room);\n      setRoom(room);\n      const wordColorMappingArray = await Promise.all(Object.entries(data.word_color_mapping).map(async _ref => {\n        let [word, color] = _ref;\n        return {\n          word,\n          color\n        };\n      }));\n      setWordColorMapping(wordColorMappingArray);\n      setClickedCells(new Array(25).fill(false));\n      setFetchingData(false); // Finish fetching data\n    } catch (error) {\n      console.error('Error fetching word color mapping:', error);\n    }\n  };\n  const handleCellClick = index => {\n    if (gameOver || spymasterMode && clickedCells[index]) {\n      return;\n    }\n    if (clickedCells[index]) {\n      return; // Cell has already been clicked\n    }\n\n    if (spymasterMode) {\n      return; // Disallow cell click in Spymaster Mode\n    }\n\n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n    if (!fetchingData && wordColorMapping.length === 25) {\n      const {\n        color\n      } = wordColorMapping[index];\n      if (color === 'black') {\n        if (currentTurn === 'blue') {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n        } else {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n        }\n        setGameOver(true);\n      } else if (color === 'blue') {\n        setBlueScore(blueScore + 1);\n        if (blueScore + 1 === BLUE_WORD_COUNT) {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n          setGameOver(true);\n        }\n      } else if (color === 'red') {\n        setRedScore(redScore + 1);\n        if (redScore + 1 === RED_WORD_COUNT) {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n          setGameOver(true);\n        }\n      }\n      if (currentTurn !== color && color !== 'black') {\n        setCurrentTurn(prevTurn => prevTurn === 'blue' ? 'red' : 'blue');\n      }\n    }\n  };\n  const handleNewGame = () => {\n    setFetchingData(true); // Start fetching data\n    fetchWordColorMapping();\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n  };\n  const socket = io();\n  socket.emit(\"join\", {\n    room: room\n  });\n  const handleJoinGame = () => {\n    socket.emit(\"join\", {\n      room: codeEntered\n    });\n  };\n  const handleToggleSpymasterMode = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n  const renderGrid = () => {\n    if (fetchingData) {\n      return null; // Return null when data is being fetched\n    }\n\n    if (wordColorMapping.length !== 25) {\n      return null; // Return null if wordColorMapping is not yet populated\n    }\n\n    const grid = [];\n    let rowIndex = 0;\n    for (let i = 0; i < 25; i += 5) {\n      const row = [];\n      for (let j = i; j < i + 5; j++) {\n        const {\n          word,\n          color\n        } = wordColorMapping[j];\n        let cellStyle = {\n          backgroundColor: 'white',\n          boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)'\n        };\n        if (spymasterMode) {\n          cellStyle.backgroundColor = color === 'neutral' ? word === 'black' ? 'black' : 'lightgrey' : color;\n          cellStyle.color = 'white';\n        } else if (clickedCells[j]) {\n          cellStyle.backgroundColor = color === 'neutral' ? word === 'black' ? 'black' : 'lightgrey' : color;\n          cellStyle.color = 'white';\n        }\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          style: cellStyle,\n          onClick: () => handleCellClick(j),\n          children: word\n        }, j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this));\n      }\n      grid.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this));\n      rowIndex++;\n    }\n    return grid;\n  };\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pregame\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pregame-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewGame,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"join-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinGame,\n            children: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"text\",\n            placeholder: \"Code\",\n            name: \"code\",\n            value: codeEntered,\n            onChange: e => setCodeEntered(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Game Room: \", room]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Remaining Words\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 30\n          }, this), \"Blue: \", remainingBlueWords, \" | Red: \", remainingRedWords]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"codenames-board\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"codenames-grid\",\n            children: renderGrid()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNewGame,\n            children: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleToggleSpymasterMode,\n            children: \"Spymaster Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Turn: \", currentTurn]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 27\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: winnerMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"QstFt0j0XW904aLDc2WmfOP3uOk=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","room","setRoom","clickedCells","setClickedCells","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameStarted","setGameStarted","gameOver","setGameOver","spymasterMode","setSpymasterMode","winnerMessage","setWinnerMessage","fetchingData","setFetchingData","codeEntered","setCodeEntered","BLUE_WORD_COUNT","RED_WORD_COUNT","fetchWordColorMapping","response","fetch","ok","Error","status","statusText","data","json","console","log","wordColorMappingArray","Promise","all","Object","entries","word_color_mapping","map","_ref","word","color","Array","fill","error","handleCellClick","index","updatedClickedCells","length","setWinner","prevTurn","handleNewGame","socket","emit","handleJoinGame","handleToggleSpymasterMode","calculateRemainingWords","teamScore","totalWords","renderGrid","grid","rowIndex","i","row","j","cellStyle","backgroundColor","boxShadow","push","className","style","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","remainingBlueWords","remainingRedWords","type","placeholder","name","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport '../index.css';\n\nconst CodeNames = () => {\n  const [wordColorMapping, setWordColorMapping] = useState([]);\n  const [room, setRoom] = useState([]);\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false)\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [fetchingData, setFetchingData] = useState(true);\n  const [codeEntered, setCodeEntered] = useState('');\n\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n\n  useEffect(() => {\n    fetchWordColorMapping();\n  }, []);\n\n  const fetchWordColorMapping = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch word color mapping. Status: ${response.status} - ${response.statusText}`);\n      }\n      const data = await response.json();\n\n      console.log(data)\n\n      const room = data.room['room'];\n      console.log(room)\n\n      setRoom(room);\n\n      const wordColorMappingArray = await Promise.all(\n        Object.entries(data.word_color_mapping).map(async ([word, color]) => {\n          return { word, color };\n        })\n      );\n      setWordColorMapping(wordColorMappingArray);\n      setClickedCells(new Array(25).fill(false));\n      setFetchingData(false); // Finish fetching data\n    } catch (error) {\n      console.error('Error fetching word color mapping:', error);\n    }\n  };\n\n  const handleCellClick = (index) => {\n    if (gameOver || (spymasterMode && clickedCells[index])) {\n      return;\n    }\n\n    if (clickedCells[index]) {\n      return; // Cell has already been clicked\n    }\n\n    if (spymasterMode) {\n      return; // Disallow cell click in Spymaster Mode\n    }\n\n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n\n    if (!fetchingData && wordColorMapping.length === 25) {\n      const { color } = wordColorMapping[index];\n\n      if (color === 'black') {\n        if (currentTurn === 'blue') {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n        } else {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n        }\n        setGameOver(true);\n      } else if (color === 'blue') {\n        setBlueScore(blueScore + 1);\n        if (blueScore + 1 === BLUE_WORD_COUNT) {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n          setGameOver(true);\n        }\n      } else if (color === 'red') {\n        setRedScore(redScore + 1);\n        if (redScore + 1 === RED_WORD_COUNT) {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n          setGameOver(true);\n        }\n      }\n      if (currentTurn !== color && color !== 'black') {\n        setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n      }\n    }\n  };\n\n  const handleNewGame = () => {\n    setFetchingData(true); // Start fetching data\n    fetchWordColorMapping();\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true)\n  };\n\n  const socket = io();\n  socket.emit(\"join\", { room: room });\n\n  const handleJoinGame = () => {\n    socket.emit(\"join\", { room: codeEntered });\n  };\n\n  const handleToggleSpymasterMode = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n\n  const renderGrid = () => {\n    if (fetchingData) {\n      return null; // Return null when data is being fetched\n    }\n\n    if (wordColorMapping.length !== 25) {\n      return null; // Return null if wordColorMapping is not yet populated\n    }\n\n    const grid = [];\n    let rowIndex = 0;\n\n    for (let i = 0; i < 25; i += 5) {\n      const row = [];\n\n      for (let j = i; j < i + 5; j++) {\n        const { word, color } = wordColorMapping[j];\n\n        let cellStyle = {\n          backgroundColor: 'white',\n          boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n        };\n\n        if (spymasterMode) {\n          cellStyle.backgroundColor =\n            color === 'neutral' ? (word === 'black' ? 'black' : 'lightgrey') : color;\n          cellStyle.color = 'white';\n        } else if (clickedCells[j]) {\n          cellStyle.backgroundColor =\n            color === 'neutral' ? (word === 'black' ? 'black' : 'lightgrey') : color;\n          cellStyle.color = 'white';\n        }\n\n        row.push(\n          <div\n            key={j}\n            className=\"box\"\n            style={cellStyle}\n            onClick={() => handleCellClick(j)}\n          >\n            {word}\n          </div>\n        );\n      }\n\n      grid.push(\n        <div key={rowIndex} className=\"grid-row\">\n          {row}\n        </div>\n      );\n\n      rowIndex++;\n    }\n\n    return grid;\n  };\n\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n\n  return (\n\n    <div className=\"codenames\">\n      <h1>Code Names</h1>\n\n      {!gameStarted &&\n        <div className=\"pregame\">\n          <div className=\"pregame-buttons\">\n            <button onClick={handleNewGame}>Create Game</button>\n            <div className=\"join-game\">\n              <button onClick={handleJoinGame}>Join Game</button>\n              <input className=\"input\" type=\"text\" placeholder=\"Code\" name=\"code\" value={codeEntered} onChange={(e) => setCodeEntered(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n      }\n\n      {gameStarted &&\n        <div>\n          <h2>Game Room: {room}</h2>\n          <div>\n            <h4>\n              Remaining Words<br />\n              Blue: {remainingBlueWords} | Red: {remainingRedWords}\n            </h4>\n            <div className=\"codenames-board\">\n              <div className=\"codenames-grid\">{renderGrid()}</div>\n            </div>\n            <div>\n              <button onClick={handleNewGame}>Create Game</button>\n              <button onClick={handleToggleSpymasterMode}>Spymaster Mode</button>\n            </div>\n            {!gameOver && <h4>Turn: {currentTurn}</h4>}\n            {gameOver && <h4>{winnerMessage}</h4>}\n          </div>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default CodeNames;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}