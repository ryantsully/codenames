{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  const [wordColorMapping, setWordColorMapping] = useState([]);\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [dataFetched, setDataFetched] = useState(false);\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchWordColorMapping();\n    };\n    fetchData();\n  }, []);\n  const fetchWordColorMapping = async () => {\n    try {\n      console.log('Fetching word color mapping...');\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch word color mapping. Status: ${response.status} - ${response.statusText}`);\n      }\n      console.log('Word color mapping fetched successfully.');\n      const data = await response.json();\n      console.log('Response:', data);\n      const wordColorMappingArray = await Promise.all(Object.entries(data).map(async _ref => {\n        let [word, color] = _ref;\n        return {\n          word,\n          color\n        };\n      }));\n      console.log('Word Color Mapping Array:', wordColorMappingArray);\n      setWordColorMapping(wordColorMappingArray);\n      setClickedCells(new Array(25).fill(false));\n      console.log('Fetching word color mapping completed.');\n      setDataFetched(true);\n    } catch (error) {\n      console.error('Error fetching word color mapping:', error);\n    }\n  };\n\n  // Rest of the code...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Remaining Words\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 26\n        }, this), \"Blue: \", remainingBlueWords, \" | Red: \", remainingRedWords]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"codenames-board\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"codenames-grid\",\n          children: dataFetched && renderGrid()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleToggleSpymasterMode,\n          children: \"Spymaster Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Turn: \", currentTurn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 23\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: winnerMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"bDC9j5ylbFXY5GU6lTLJfDfnExY=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","clickedCells","setClickedCells","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameOver","setGameOver","spymasterMode","setSpymasterMode","winner","setWinner","winnerMessage","setWinnerMessage","dataFetched","setDataFetched","BLUE_WORD_COUNT","RED_WORD_COUNT","fetchData","fetchWordColorMapping","console","log","response","fetch","ok","Error","status","statusText","data","json","wordColorMappingArray","Promise","all","Object","entries","map","_ref","word","color","Array","fill","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","remainingBlueWords","remainingRedWords","renderGrid","onClick","handleNewGame","handleToggleSpymasterMode","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\n\nconst CodeNames = () => {\n  const [wordColorMapping, setWordColorMapping] = useState([]);\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [dataFetched, setDataFetched] = useState(false);\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchWordColorMapping();\n    };\n\n    fetchData();\n  }, []);\n\n  const fetchWordColorMapping = async () => {\n    try {\n      console.log('Fetching word color mapping...');\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch word color mapping. Status: ${response.status} - ${response.statusText}`\n        );\n      }\n\n      console.log('Word color mapping fetched successfully.');\n\n      const data = await response.json();\n      console.log('Response:', data);\n\n      const wordColorMappingArray = await Promise.all(\n        Object.entries(data).map(async ([word, color]) => {\n          return { word, color };\n        })\n      );\n      console.log('Word Color Mapping Array:', wordColorMappingArray);\n      setWordColorMapping(wordColorMappingArray);\n      setClickedCells(new Array(25).fill(false));\n      console.log('Fetching word color mapping completed.');\n      setDataFetched(true);\n    } catch (error) {\n      console.error('Error fetching word color mapping:', error);\n    }\n  };\n\n  // Rest of the code...\n\n  return (\n    <div className=\"codenames\">\n      <h1>Code Names</h1>\n\n      <div>\n        <h4>\n          Remaining Words<br />\n          Blue: {remainingBlueWords} | Red: {remainingRedWords}\n        </h4>\n\n        <div className=\"codenames-board\">\n          <div className=\"codenames-grid\">{dataFetched && renderGrid()}</div>\n        </div>\n\n        <div>\n          <button onClick={handleNewGame}>New Game</button>\n          <button onClick={handleToggleSpymasterMode}>Spymaster Mode</button>\n        </div>\n        {!gameOver && <h4>Turn: {currentTurn}</h4>}\n        {gameOver && <h4>{winnerMessage}</h4>}\n      </div>\n    </div>\n  );\n};\n\nexport default CodeNames;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}