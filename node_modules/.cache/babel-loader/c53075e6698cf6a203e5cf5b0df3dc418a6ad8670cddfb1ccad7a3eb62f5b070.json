{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://127.0.0.1:5000');\nsocket.on('connect', function () {\n  socket.emit(joinCode = joinCode);\n});\nconst CodeNames = () => {\n  _s();\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  let [words, setWords] = useState([]);\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n  socket.on('update_word_color_mapping', data => {\n    console.log(\"New activity found on server, refreshing stuff\");\n    setWordColorMapping(data['word_color_mapping']);\n    setCurrentTurn(data['currentTurn']);\n    setBlueScore(data['blueScore']);\n    setRedScore(data['redScore']);\n    setGameStarted(data['gameStarted']);\n    setGameOver(data['gameOver']);\n    setWinnerMessage(data['winnerMessage']);\n    setJoinCode(data['room_code']);\n  });\n  const createGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/create_new_game`);\n      if (!response) {\n        throw new Error('Create game didnt work');\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n    } catch (error) {\n      console.log(\"There was an error with create new game\");\n    }\n  };\n  const joinGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/join_game/${joinCode}`);\n      if (!response) {\n        throw new Error('Join didnt work');\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n      setWords(Object.keys(wordColorMapping['word_color_mapping']));\n      console.log(wordColorMapping);\n    } catch (error) {\n      console.log(\"There was an error with join game\");\n    }\n  };\n  const updateGridOnServer = async updatedWordColorMapping => {\n    console.log(updatedWordColorMapping);\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/click_event/${updatedWordColorMapping['room_code']}`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          word_color_mapping: updatedWordColorMapping['word_color_mapping'],\n          blueScore: updatedWordColorMapping['blueScore'],\n          redScore: updatedWordColorMapping['redScore'],\n          currentTurn: updatedWordColorMapping['currentTurn'],\n          gameStarted: updatedWordColorMapping['gameStarted'],\n          gameOver: updatedWordColorMapping['gameOver'],\n          winnerMessage: updatedWordColorMapping['winnerMessage'],\n          room_code: joinCode\n        })\n      });\n      console.log(\"Updated grid on server\");\n    } catch (error) {\n      console.log(\"There was an error with retrieving updated grid from server\");\n    }\n  };\n  useEffect(() => {\n    if (wordColorMapping.length !== 0) {\n      console.log(\"Game info retrieved from server\");\n      setWords(Object.keys(wordColorMapping['word_color_mapping']));\n      setJoinCode(wordColorMapping[\"room_code\"]);\n      setWordColorMapping(wordColorMapping);\n      createGrid(wordColorMapping);\n    }\n  }, [wordColorMapping, clickedCells]);\n  useEffect(() => {\n    if (clickedCells.length !== 0) {\n      wordColorMapping['blueScore'] = blueScore;\n      wordColorMapping['redScore'] = redScore;\n      wordColorMapping['currentTurn'] = currentTurn;\n      wordColorMapping['gameStarted'] = gameStarted;\n      wordColorMapping['gameOver'] = gameOver;\n      wordColorMapping['winnerMessage'] = winnerMessage;\n      updateGridOnServer(wordColorMapping);\n    }\n  }, [blueScore, redScore, currentTurn, gameStarted, gameOver, winnerMessage]);\n  function getKeyByPosition(obj, position) {\n    for (const key in obj) {\n      if (obj[key].position === position) {\n        return key;\n      }\n    }\n    return null;\n  }\n  function createGrid(wordColorMapping) {\n    const numRows = 5;\n    const numColumns = 5;\n    const grid = [];\n    for (let row = 0; row < numRows; row++) {\n      // Loop through the rows\n      const rowCells = [];\n      for (let column = 0; column < numColumns; column++) {\n        let key = row + 1 + column * 5;\n        let word = getKeyByPosition(wordColorMapping['word_color_mapping'], key);\n        let color = wordColorMapping['word_color_mapping'][word]['color'];\n        let clicked = wordColorMapping['word_color_mapping'][word]['clicked'];\n        let cellStyle = {\n          backgroundColor: 'white',\n          boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)'\n        };\n        if (spymasterMode || clicked) {\n          cellStyle.backgroundColor = color === 'neutral' ? color === 'black' ? 'black' : 'lightgrey' : color;\n          cellStyle.color = 'white';\n        }\n        const cell = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          style: cellStyle,\n          onClick: () => handleCellClick(key),\n          children: word\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 22\n        }, this); // Create a cell\n        rowCells.push(cell); //Add Cell to row\n      }\n\n      grid.push(rowCells); //Add row to grid\n    }\n\n    return grid;\n  }\n  const handleCellClick = index => {\n    if (gameOver || spymasterMode || clickedCells[index]) {\n      console.log(\"cell\", index, \"clicked! Do nothing since game over, spymaster mode, or cell already clicked\");\n      return;\n    }\n    let word = getKeyByPosition(wordColorMapping['word_color_mapping'], index);\n    let color = wordColorMapping['word_color_mapping'][word].color;\n    wordColorMapping['word_color_mapping'][word].clicked = true;\n    console.log(\"Click event detected\");\n    if (color === 'black') {\n      if (currentTurn === 'blue') {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n        setGameOver(true);\n        wordColorMapping['gameOver'] = true;\n        updateGridOnServer(wordColorMapping);\n      } else {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n        setGameOver(true);\n      }\n      setGameOver(true);\n    } else if (color === 'blue') {\n      setBlueScore(blueScore + 1);\n      if (blueScore + 1 === BLUE_WORD_COUNT) {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n        setGameOver(true);\n      }\n    } else if (color === 'red') {\n      setRedScore(redScore + 1);\n      if (redScore + 1 === RED_WORD_COUNT) {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n        setGameOver(true);\n      }\n    }\n    if (currentTurn !== color && color !== 'black') {\n      setCurrentTurn(prevTurn => prevTurn === 'blue' ? 'red' : 'blue');\n    }\n    setClickedCells(index);\n  };\n  const handleNewGame = async () => {\n    createGame();\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n  };\n  const handleJoinGame = async () => {\n    joinGame(joinCode);\n    setGameStarted(true);\n  };\n  const handleToggleSpymasterMode = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pregame\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pregame-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewGame,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"join-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinGame,\n            children: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"text\",\n            placeholder: \"Code\",\n            name: \"code\",\n            onChange: e => setJoinCode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Game Room: \", joinCode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Remaining Words\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 30\n          }, this), \"Blue: \", remainingBlueWords, \" | Red: \", remainingRedWords]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"codenames-board\",\n          children: words.length === 25 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"codenames-grid\",\n            children: createGrid(wordColorMapping)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNewGame,\n            children: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleToggleSpymasterMode,\n            children: \"Spymaster Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Turn: \", currentTurn]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 27\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: winnerMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"Su1YaUC9gWCB2gHqeSXA/cA3Q+E=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","on","emit","joinCode","CodeNames","_s","wordColorMapping","setWordColorMapping","words","setWords","setJoinCode","clickedCells","setClickedCells","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameStarted","setGameStarted","gameOver","setGameOver","spymasterMode","setSpymasterMode","winner","setWinner","winnerMessage","setWinnerMessage","BLUE_WORD_COUNT","RED_WORD_COUNT","data","console","log","createGame","response","fetch","Error","json","error","joinGame","Object","keys","updateGridOnServer","updatedWordColorMapping","method","headers","body","JSON","stringify","word_color_mapping","room_code","length","createGrid","getKeyByPosition","obj","position","key","numRows","numColumns","grid","row","rowCells","column","word","color","clicked","cellStyle","backgroundColor","boxShadow","cell","className","style","onClick","handleCellClick","children","fileName","_jsxFileName","lineNumber","columnNumber","push","index","prevTurn","handleNewGame","handleJoinGame","handleToggleSpymasterMode","calculateRemainingWords","teamScore","totalWords","remainingBlueWords","remainingRedWords","type","placeholder","name","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\n\nimport io from 'socket.io-client'\n\n\nconst socket = io('http://127.0.0.1:5000');\nsocket.on('connect', function () {\n  socket.emit(joinCode = joinCode)\n});\n\nconst CodeNames = () => {\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  let [words, setWords] = useState([]);\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false)\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n\n\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n\n  socket.on('update_word_color_mapping', (data) => {\n    console.log(\"New activity found on server, refreshing stuff\")\n    setWordColorMapping(data['word_color_mapping'])\n    setCurrentTurn(data['currentTurn'])\n    setBlueScore(data['blueScore'])\n    setRedScore(data['redScore'])\n    setGameStarted(data['gameStarted'])\n    setGameOver(data['gameOver'])\n    setWinnerMessage(data['winnerMessage'])\n    setJoinCode(data['room_code'])\n  });\n\n  const createGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/create_new_game`)\n      if (!response) {\n        throw new Error('Create game didnt work')\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n    }\n    catch (error) {\n      console.log(\"There was an error with create new game\")\n    }\n  }\n\n  const joinGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/join_game/${joinCode}`)\n      if (!response) {\n        throw new Error('Join didnt work')\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n      setWords(Object.keys(wordColorMapping['word_color_mapping']))\n      console.log(wordColorMapping)\n\n    }\n    catch (error) {\n      console.log(\"There was an error with join game\")\n    }\n  }\n\n  const updateGridOnServer = async (updatedWordColorMapping) => {\n    console.log(updatedWordColorMapping)\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/click_event/${updatedWordColorMapping['room_code']}`, {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(\n          {\n            word_color_mapping: updatedWordColorMapping['word_color_mapping'],\n            blueScore: updatedWordColorMapping['blueScore'],\n            redScore: updatedWordColorMapping['redScore'],\n            currentTurn: updatedWordColorMapping['currentTurn'],\n            gameStarted: updatedWordColorMapping['gameStarted'],\n            gameOver: updatedWordColorMapping['gameOver'],\n            winnerMessage: updatedWordColorMapping['winnerMessage'],\n            room_code: joinCode\n          }\n        )\n      })\n      console.log(\"Updated grid on server\")\n    }\n    catch (error) {\n      console.log(\"There was an error with retrieving updated grid from server\")\n    }\n  }\n\n  useEffect(() => {\n    if (wordColorMapping.length !== 0) {\n      console.log(\"Game info retrieved from server\")\n      setWords(Object.keys(wordColorMapping['word_color_mapping']))\n      setJoinCode(wordColorMapping[\"room_code\"])\n      setWordColorMapping(wordColorMapping)\n      createGrid(wordColorMapping)\n    }\n  }, [wordColorMapping, clickedCells]);\n\n  useEffect(() => {\n    if (clickedCells.length !== 0) {\n      wordColorMapping['blueScore'] = blueScore\n      wordColorMapping['redScore'] = redScore\n      wordColorMapping['currentTurn'] = currentTurn\n      wordColorMapping['gameStarted'] = gameStarted\n      wordColorMapping['gameOver'] = gameOver\n      wordColorMapping['winnerMessage'] = winnerMessage\n      updateGridOnServer(wordColorMapping)\n    }\n  }, [blueScore, redScore, currentTurn, gameStarted, gameOver, winnerMessage]);\n\n  function getKeyByPosition(obj, position) {\n    for (const key in obj) {\n      if (obj[key].position === position) {\n        return key;\n      }\n    }\n    return null;\n  }\n\n  function createGrid(wordColorMapping) {\n    const numRows = 5;\n    const numColumns = 5;\n    const grid = [];\n    for (let row = 0; row < numRows; row++) {     // Loop through the rows\n      const rowCells = [];\n      for (let column = 0; column < numColumns; column++) {\n        let key = (row + 1) + (column * 5)\n        let word = getKeyByPosition(wordColorMapping['word_color_mapping'], key)\n        let color = wordColorMapping['word_color_mapping'][word]['color']\n        let clicked = wordColorMapping['word_color_mapping'][word]['clicked']\n        let cellStyle = {\n          backgroundColor: 'white',\n          boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n        };\n        if (spymasterMode || clicked) {\n          cellStyle.backgroundColor =\n            color === 'neutral' ? (color === 'black' ? 'black' : 'lightgrey') : color;\n          cellStyle.color = 'white';\n        }\n        const cell = <div key={key}\n          className=\"box\"\n          style={cellStyle}\n          onClick={() => handleCellClick(key)}>\n          {word}</div>; // Create a cell\n        rowCells.push(cell); //Add Cell to row\n      }\n      grid.push(rowCells); //Add row to grid\n    }\n    return grid\n  }\n\n  const handleCellClick = (index) => {\n    if (gameOver || spymasterMode || clickedCells[index]) {\n      console.log(\"cell\", index, \"clicked! Do nothing since game over, spymaster mode, or cell already clicked\")\n      return;\n    }\n    let word = getKeyByPosition(wordColorMapping['word_color_mapping'], index)\n    let color = wordColorMapping['word_color_mapping'][word].color\n    wordColorMapping['word_color_mapping'][word].clicked = true\n    console.log(\"Click event detected\")\n    if (color === 'black') {\n      if (currentTurn === 'blue') {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n        setGameOver(true);\n        wordColorMapping['gameOver'] = true\n        updateGridOnServer(wordColorMapping)\n      } else {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n        setGameOver(true);\n      }\n      setGameOver(true);\n    } else if (color === 'blue') {\n      setBlueScore(blueScore + 1);\n      if (blueScore + 1 === BLUE_WORD_COUNT) {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n        setGameOver(true);\n      }\n    } else if (color === 'red') {\n      setRedScore(redScore + 1);\n      if (redScore + 1 === RED_WORD_COUNT) {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n        setGameOver(true);\n      }\n    }\n    if (currentTurn !== color && color !== 'black') {\n      setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n    }\n    setClickedCells(index)\n  };\n\n  const handleNewGame = async () => {\n    createGame();\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n  };\n\n  const handleJoinGame = async () => {\n    joinGame(joinCode)\n    setGameStarted(true);\n  };\n\n  const handleToggleSpymasterMode = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n\n  return (\n\n    <div className=\"codenames\">\n\n      <h1>Code Names</h1>\n\n      {!gameStarted &&\n        <div className=\"pregame\">\n          <div className=\"pregame-buttons\">\n            <button onClick={handleNewGame}>Create Game</button>\n            <div className=\"join-game\">\n              <button onClick={handleJoinGame}>Join Game</button>\n              <input className=\"input\" type=\"text\" placeholder=\"Code\" name=\"code\" onChange={(e) => setJoinCode(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n      }\n\n      {gameStarted &&\n        <div>\n          <h2>Game Room: {joinCode}</h2>\n          <div>\n            <h4>\n              Remaining Words<br />\n              Blue: {remainingBlueWords} | Red: {remainingRedWords}\n            </h4>\n\n            <div className=\"codenames-board\">\n              {words.length === 25 &&\n                <div className=\"codenames-grid\">{createGrid(wordColorMapping)}</div>\n              }\n            </div>\n\n            <div>\n              <button onClick={handleNewGame}>Create Game</button>\n              <button onClick={handleToggleSpymasterMode}>Spymaster Mode</button>\n            </div>\n            {!gameOver && <h4>Turn: {currentTurn}</h4>}\n            {gameOver && <h4>{winnerMessage}</h4>}\n          </div>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default CodeNames;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}