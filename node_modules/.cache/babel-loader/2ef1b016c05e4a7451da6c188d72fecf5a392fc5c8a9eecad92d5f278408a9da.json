{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/lab/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  const [wordColorMapping, setWordColorMapping] = useState([]);\n  useEffect(() => {\n    fetchWordColorMapping();\n  }, []);\n  const fetchWordColorMapping = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n      const data = await response.json(); // Parse the response as JSON\n      console.log('Response:', data); // Log the response\n      setWordColorMapping(data); // Update the state directly with the response data\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  //   const renderGrid = () => {\n  //     console.log(wordColorMapping);\n  //     console.log(wordColorMapping.length);\n  //     if (wordColorMapping.length !== 25) {\n  //       return null;\n  //     }\n\n  const renderGrid = () => {\n    console.log(wordColorMapping);\n    console.log(wordColorMapping.length);\n    if (Object.keys(wordColorMapping).length !== 25) {\n      return null;\n    }\n    const grid = [];\n    let rowIndex = 0;\n    for (let i = 0; i < 25; i += 5) {\n      const row = [];\n      for (let j = i; j < i + 5; j++) {\n        const wordColor = wordColorMapping[j];\n        const word = Object.keys(wordColor)[0];\n        const color = wordColor[word];\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `box ${color}`,\n          children: word\n        }, j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this));\n      }\n      grid.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this));\n      rowIndex++;\n    }\n    return grid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: renderGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchWordColorMapping,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Spymaster Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"SWN1jV/uSiMvkEbCD9j4FyaySto=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","fetchWordColorMapping","response","fetch","data","json","console","log","error","renderGrid","length","Object","keys","grid","rowIndex","i","row","j","wordColor","word","color","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/lab/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\n\nconst CodeNames = () => {\n  const [wordColorMapping, setWordColorMapping] = useState([]);\n\n  useEffect(() => {\n    fetchWordColorMapping();\n  }, []);\n\nconst fetchWordColorMapping = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n      const data = await response.json(); // Parse the response as JSON\n      console.log('Response:', data); // Log the response\n      setWordColorMapping(data); // Update the state directly with the response data\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n//   const renderGrid = () => {\n//     console.log(wordColorMapping);\n//     console.log(wordColorMapping.length);\n//     if (wordColorMapping.length !== 25) {\n//       return null;\n//     }\n\n    const renderGrid = () => {\n        console.log(wordColorMapping);\n        console.log(wordColorMapping.length);\n        if (Object.keys(wordColorMapping).length !== 25) {\n          return null;\n        }\n\n    const grid = [];\n    let rowIndex = 0;\n\n    for (let i = 0; i < 25; i += 5) {\n      const row = [];\n\n      for (let j = i; j < i + 5; j++) {\n        const wordColor = wordColorMapping[j];\n        const word = Object.keys(wordColor)[0];\n        const color = wordColor[word];\n\n        row.push(\n          <div key={j} className={`box ${color}`}>\n            {word}\n          </div>\n        );\n      }\n\n      grid.push(\n        <div key={rowIndex} className=\"grid-row\">\n          {row}\n        </div>\n      );\n\n      rowIndex++;\n    }\n\n    return grid;\n  };\n\n  return (\n    <div className=\"codenames\">\n      <h1>Code Names</h1>\n\n      <div className=\"grid\">\n        {renderGrid()}\n      </div>\n\n      <button onClick={fetchWordColorMapping}>New Game</button>\n      <button>Spymaster Mode</button>\n    </div>\n  );\n};\n\nexport default CodeNames;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}