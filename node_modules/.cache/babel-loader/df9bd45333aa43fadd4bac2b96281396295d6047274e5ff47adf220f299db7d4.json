{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/ryans_workshop/src/pages/Wordle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wordle = () => {\n  _s();\n  const [guessWord, setGuessWord] = useState('');\n  const newWordleGame = () => {\n    console.log(\"Create New Wordle Game!\");\n  };\n\n  // const createFirstWord = () => {\n  //     console.log(\"Pull word from backend\")\n\n  // }\n\n  // const handleGuess = () => {\n  //     console.log(\"Validate entry\")\n  //     console.log(\"If not 6th turn, create new word row\")\n  // }\n\n  function saveWordCharacters(word) {\n    if (word.length !== 5) {\n      console.log(\"Guess Word:\", word);\n      console.log(\"Word must be exactly 5 characters long.\");\n      return;\n    }\n    var characters = {};\n    for (var i = 0; i < word.length; i++) {\n      var character = word.charAt(i);\n      characters[i] = character;\n    }\n    console.log(\"Guess Word:\", word);\n    console.log(characters);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordle\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"GuessWord:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        required: true,\n        value: guessWord,\n        maxLength: 5 // Use camelCase for attributes like maxLength\n        ,\n        onChange: e => setGuessWord(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cells\",\n      children: guessWord.split('').map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        children: character\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveWordCharacters(guessWord),\n        children: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: newWordleGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(Wordle, \"/SKEzgCdbpXkONS+v+u+pO9PoiA=\");\n_c = Wordle;\nexport default Wordle;\nvar _c;\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Wordle","_s","guessWord","setGuessWord","newWordleGame","console","log","saveWordCharacters","word","length","characters","i","character","charAt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","required","value","maxLength","onChange","e","target","split","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/ryans_workshop/src/pages/Wordle.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\n\nconst Wordle = () => {\n\n    const [guessWord, setGuessWord] = useState('');\n\n    const newWordleGame = () => {\n        console.log(\"Create New Wordle Game!\")\n    }\n\n    // const createFirstWord = () => {\n    //     console.log(\"Pull word from backend\")\n\n    // }\n\n    // const handleGuess = () => {\n    //     console.log(\"Validate entry\")\n    //     console.log(\"If not 6th turn, create new word row\")\n    // }\n\n    function saveWordCharacters(word) {\n        if (word.length !== 5) {\n            console.log(\"Guess Word:\", word);\n            console.log(\"Word must be exactly 5 characters long.\");\n            return;\n        }\n        var characters = {};\n        for (var i = 0; i < word.length; i++) {\n            var character = word.charAt(i);\n            characters[i] = character;\n        }\n        console.log(\"Guess Word:\", word);\n        console.log(characters);\n    }\n\n    return (\n        <div className=\"wordle\">\n            <h1>Wordle</h1>\n\n            <h2>\n                <label>GuessWord:</label>\n                <input\n                    className=\"input\"\n                    type=\"text\"\n                    required\n                    value={guessWord}\n                    maxLength={5} // Use camelCase for attributes like maxLength\n                    onChange={(e) => setGuessWord(e.target.value)}\n                />\n            </h2>\n\n            <div className='cells'>\n                {guessWord.split('').map((character, index) => (\n                    <div key={index} className='cell'>\n                        {character}\n                    </div>\n                ))}\n            </div>\n\n\n            <div className='button'>\n                <button onClick={() => saveWordCharacters(guessWord)}>Guess</button>\n                <button onClick={newWordleGame}>New Game</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Wordle;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}