{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/lab/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  const [wordColorMapping, setWordColorMapping] = useState([]);\n  const [clickedCells, setClickedCells] = useState([]);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    fetchWordColorMapping();\n  }, []);\n  const fetchWordColorMapping = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n      const data = await response.json();\n      console.log('Response:', data);\n      const wordColorMappingArray = Object.entries(data).map(_ref => {\n        let [word, color] = _ref;\n        return {\n          word,\n          color\n        };\n      });\n      setWordColorMapping(wordColorMappingArray);\n      setClickedCells(new Array(25).fill(false));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleCellClick = index => {\n    if (gameOver || spymasterMode && clickedCells[index]) {\n      return;\n    }\n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n    const {\n      color\n    } = wordColorMapping[index];\n    if (color === 'black') {\n      setGameOver(true);\n    } else if (color === 'blue' && currentTurn === 'blue') {\n      setBlueScore(blueScore + 1);\n    } else if (color === 'red' && currentTurn === 'red') {\n      setRedScore(redScore + 1);\n    } else setCurrentTurn(prevTurn => prevTurn === 'blue' ? 'red' : 'blue');\n  };\n  const handleNewGame = () => {\n    fetchWordColorMapping();\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n  };\n  const handleSpymasterModeClick = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n  const renderGrid = () => {\n    if (wordColorMapping.length !== 25) {\n      return null;\n    }\n    const grid = [];\n    let rowIndex = 0;\n    for (let i = 0; i < 25; i += 5) {\n      const row = [];\n      for (let j = i; j < i + 5; j++) {\n        const {\n          word,\n          color\n        } = wordColorMapping[j];\n        let cellStyle = {\n          backgroundColor: 'transparent',\n          cursor: 'pointer'\n        };\n        if (clickedCells[j]) {\n          cellStyle.backgroundColor = color === 'neutral' ? word === 'black' ? 'black' : 'lightgrey' : color;\n          cellStyle.cursor = 'default';\n        }\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          style: cellStyle,\n          onClick: () => handleCellClick(j),\n          children: word\n        }, j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this));\n      }\n      grid.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this));\n      rowIndex++;\n    }\n    return grid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: renderGrid()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Turn: \", currentTurn === 'blue' ? 'Blue' : 'Red']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNewGame,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSpymasterModeClick,\n      children: spymasterMode ? 'Guesser Mode' : 'Spymaster Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"vPQTXfsBeKaErxXJ/Bf/60twdXQ=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","clickedCells","setClickedCells","spymasterMode","setSpymasterMode","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameOver","setGameOver","fetchWordColorMapping","response","fetch","data","json","console","log","wordColorMappingArray","Object","entries","map","_ref","word","color","Array","fill","error","handleCellClick","index","updatedClickedCells","prevTurn","handleNewGame","handleSpymasterModeClick","renderGrid","length","grid","rowIndex","i","row","j","cellStyle","backgroundColor","cursor","push","className","style","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/lab/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\n\nconst CodeNames = () => {\n  const [wordColorMapping, setWordColorMapping] = useState([]);\n  const [clickedCells, setClickedCells] = useState([]);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n    const [blueScore, setBlueScore] = useState(0);\n    const [redScore, setRedScore] = useState(0);\n    const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    fetchWordColorMapping();\n  }, []);\n\n  const fetchWordColorMapping = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n      const data = await response.json();\n      console.log('Response:', data);\n\n      const wordColorMappingArray = Object.entries(data).map(([word, color]) => ({\n        word,\n        color,\n      }));\n      setWordColorMapping(wordColorMappingArray);\n      setClickedCells(new Array(25).fill(false));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleCellClick = (index) => {\n    if (gameOver || (spymasterMode && clickedCells[index])) {\n      return;\n    }\n  \n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n  \n    const { color } = wordColorMapping[index];\n  \n    if (color === 'black') {\n      setGameOver(true);\n    } else if (color === 'blue' && currentTurn === 'blue') {\n      setBlueScore(blueScore + 1);\n    } else if (color === 'red' && currentTurn === 'red') {\n      setRedScore(redScore + 1);\n    }\n    else setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n  };\n\n  const handleNewGame = () => {\n    fetchWordColorMapping();\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n  };\n\n  const handleSpymasterModeClick = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n\n  const renderGrid = () => {\n    if (wordColorMapping.length !== 25) {\n      return null;\n    }\n  \n    const grid = [];\n    let rowIndex = 0;\n  \n    for (let i = 0; i < 25; i += 5) {\n      const row = [];\n  \n      for (let j = i; j < i + 5; j++) {\n        const { word, color } = wordColorMapping[j];\n  \n        let cellStyle = {\n          backgroundColor: 'transparent',\n          cursor: 'pointer',\n        };\n  \n        if (clickedCells[j]) {\n          cellStyle.backgroundColor =\n            color === 'neutral' ? (word === 'black' ? 'black' : 'lightgrey') : color;\n          cellStyle.cursor = 'default';\n        }\n  \n        row.push(\n          <div\n            key={j}\n            className=\"box\"\n            style={cellStyle}\n            onClick={() => handleCellClick(j)}\n          >\n            {word}\n          </div>\n        );\n      }\n  \n      grid.push(\n        <div key={rowIndex} className=\"grid-row\">\n          {row}\n        </div>\n      );\n  \n      rowIndex++;\n    }\n  \n    return grid;\n  };\n\n  return (\n    <div className=\"codenames\">\n      <h1>Code Names</h1>\n\n      <body>\n        <div className=\"grid\">{renderGrid()}</div>\n      </body>\n\n      <p>Turn: {currentTurn === 'blue' ? 'Blue' : 'Red'}</p>\n\n      <button onClick={handleNewGame}>New Game</button>\n      <button onClick={handleSpymasterModeClick}>\n        {spymasterMode ? 'Guesser Mode' : 'Spymaster Mode'}\n    </button>\n    </div>\n  );\n};\n\nexport default CodeNames;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}