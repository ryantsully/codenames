{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// custom hooks in react need to start with \"use\"\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Runs first part on render. Then watches \"name\" and only runs the function if it's changed\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      // We fetch the data\n      fetch(url, {\n        signa: abortCont.signal\n      }).then(res => {\n        //Response object\n        if (!res.ok) {\n          throw Error('could not fetch the data');\n        }\n        return res.json();\n      }).then(data => {\n        // getting the data\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      })\n      // this catches any network error and fires a function\n      .catch(err => {\n        setIsPending(false);\n        setError(err.message);\n      });\n    }, 1000);\n    return () => {\n      console.log('cleanup');\n    };\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signa","signal","then","res","ok","Error","json","catch","err","message","console","log"],"sources":["/Users/ryansullivan/Desktop/lab/src/pages/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n// custom hooks in react need to start with \"use\"\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Runs first part on render. Then watches \"name\" and only runs the function if it's changed\n    useEffect(() => {\n\n        const abortCont = new AbortController();\n\n        setTimeout(() => {\n        // We fetch the data\n        fetch(url, { signa: abortCont.signal })\n            .then(res => {\n                //Response object\n                if (!res.ok) {\n                    throw Error('could not fetch the data')\n                }\n                return res.json()\n            })\n            .then(data => {\n                // getting the data\n                setData(data)\n                setIsPending(false);\n                setError(null);\n            })\n            // this catches any network error and fires a function\n            .catch(err => {\n                setIsPending(false)\n                setError(err.message);\n            })\n    }, 1000);\n\n    return () => {\n        console.log('cleanup')\n    }\n}, [url]);\n\n    return { data, isPending, error }\n}\n\nexport default useFetch;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IAEZ,MAAMU,SAAS,GAAG,IAAIC,eAAe,EAAE;IAEvCC,UAAU,CAAC,MAAM;MACjB;MACAC,KAAK,CAACX,GAAG,EAAE;QAAEY,KAAK,EAAEJ,SAAS,CAACK;MAAO,CAAC,CAAC,CAClCC,IAAI,CAACC,GAAG,IAAI;QACT;QACA,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;UACT,MAAMC,KAAK,CAAC,0BAA0B,CAAC;QAC3C;QACA,OAAOF,GAAG,CAACG,IAAI,EAAE;MACrB,CAAC,CAAC,CACDJ,IAAI,CAACZ,IAAI,IAAI;QACV;QACAC,OAAO,CAACD,IAAI,CAAC;QACbG,YAAY,CAAC,KAAK,CAAC;QACnBE,QAAQ,CAAC,IAAI,CAAC;MAClB,CAAC;MACD;MAAA,CACCY,KAAK,CAACC,GAAG,IAAI;QACVf,YAAY,CAAC,KAAK,CAAC;QACnBE,QAAQ,CAACa,GAAG,CAACC,OAAO,CAAC;MACzB,CAAC,CAAC;IACV,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACTC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAC1B,CAAC;EACL,CAAC,EAAE,CAACvB,GAAG,CAAC,CAAC;EAEL,OAAO;IAAEE,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACrC,CAAC;AAAAL,EAAA,CAvCKF,QAAQ;AAyCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}