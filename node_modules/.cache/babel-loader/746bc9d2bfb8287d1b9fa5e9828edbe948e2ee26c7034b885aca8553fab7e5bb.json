{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport SocketingComponent from './SocketingComponent';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  const [codeEntered, setCodeEntered] = useState('');\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [fetchingData, setFetchingData] = useState(true);\n  const [initiateSocketingComponent, setInitiateSocketingComponent] = useState(false);\n  const [showTest, setShowTest] = useState(false);\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n  const joinGame = async codeEntered => {\n    const response = await fetch(`/join_game/${codeEntered}`);\n    const data = await response.json();\n    const wordColorMappingArray = await Promise.all(Object.entries(data.word_color_mapping).map(async _ref => {\n      let [word, color] = _ref;\n      return {\n        word,\n        color\n      };\n    }));\n    console.log(wordColorMappingArray);\n  };\n  const createGame = async () => {\n    const response = await fetch(`/create_new_game`);\n    const data = await response.json();\n    const wordColorMappingArray = await Promise.all(Object.entries(data.word_color_mapping).map(async _ref2 => {\n      let [word, color] = _ref2;\n      return {\n        word,\n        color\n      };\n    }));\n    console.log(wordColorMappingArray);\n  };\n\n  // Create the Word Color Mapping for the first time\n  // const createNewGameBoardAndSession = async () => {\n  //   try {\n  //     const response = await fetch('http://127.0.0.1:5000/create_new_game');\n\n  //     if (!response.ok) {\n  //       throw new Error(`Failed to fetch word color mapping. Status: ${response.status} - ${response.statusText}`);\n  //     }\n  //     const data = await response.json();\n  //     setJoinCode(data.room)\n  //     const wordColorMappingArray = await Promise.all(\n  //       Object.entries(data.word_color_mapping).map(async ([word, color]) => {\n  //         return { word, color };\n  //       })\n  //     );\n  //     setWordColorMapping(wordColorMappingArray)\n  //     const socket = io();\n  //     socket.emit('wordColorMapping', { word_color_mapping: wordColorMappingArray },\n  //       'room', joinCode);\n  //   } catch (error) {\n  //     console.error('Error fetching word color mapping:', error);\n  //   }\n  // };\n\n  // const fetchWordsAndRenderBoard = async (joinCode) => {\n  //   const retrieveData = async (joinCode) => {\n  //     const response = await fetch(`http://127.0.0.1:5000/retrieve_data?room_code=${joinCode}`);\n  //     const data = await response.json();\n  //     console.log(data)\n  //     const wordColorMappingArray = await Promise.all(\n  //       Object.entries(data.word_color_mapping).map(async ([word, color]) => {\n  //         return { word, color };\n  //       })\n  //     );\n  //     setWordColorMapping(wordColorMappingArray)\n  //     console.log('Retrieved data:', wordColorMappingArray);\n  //   };\n  //   // Call the function and pass the room code\n  //   retrieveData(joinCode);\n  // };\n\n  // useEffect(() => {\n  //   if (wordColorMapping.length === 25) {\n  //     renderGrid();\n  //   }\n  // }, [fetchingData, wordColorMapping]);\n\n  // const handleCellClick = (index) => {\n  //   if (gameOver || (spymasterMode && clickedCells[index])) {\n  //     return;\n  //   }\n\n  //   if (clickedCells[index]) {\n  //     return; // Cell has already been clicked\n  //   }\n\n  //   if (spymasterMode) {\n  //     return; // Disallow cell click in Spymaster Mode\n  //   }\n\n  //   const updatedClickedCells = [...clickedCells];\n  //   updatedClickedCells[index] = true;\n  //   setClickedCells(updatedClickedCells);\n\n  //   if (wordColorMapping.length === 25) {\n  //     const { color } = wordColorMapping[index];\n\n  //     if (color === 'black') {\n  //       if (currentTurn === 'blue') {\n  //         setWinner('red');\n  //         setWinnerMessage('Red Wins!');\n  //       } else {\n  //         setWinner('blue');\n  //         setWinnerMessage('Blue Wins!');\n  //       }\n  //       setGameOver(true);\n  //     } else if (color === 'blue') {\n  //       setBlueScore(blueScore + 1);\n  //       if (blueScore + 1 === BLUE_WORD_COUNT) {\n  //         setWinner('blue');\n  //         setWinnerMessage('Blue Wins!');\n  //         setGameOver(true);\n  //       }\n  //     } else if (color === 'red') {\n  //       setRedScore(redScore + 1);\n  //       if (redScore + 1 === RED_WORD_COUNT) {\n  //         setWinner('red');\n  //         setWinnerMessage('Red Wins!');\n  //         setGameOver(true);\n  //       }\n  //     }\n  //     if (currentTurn !== color && color !== 'black') {\n  //       setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n  //     }\n  //   }\n  // };\n\n  const handleNewGame = async () => {\n    createGame();\n    setShowTest(true);\n    // setFetchingData(true);\n    // createNewGameBoardAndSession();\n    // setCurrentTurn('blue');\n    // setBlueScore(0);\n    // setRedScore(0);\n    // setGameOver(false);\n    // setGameStarted(true);\n    // setInitiateSocketingComponent(true);\n    // setFetchingData(false);\n  };\n\n  const handleJoinGame = async () => {\n    joinGame(joinCode);\n    setShowTest(true);\n    // setFetchingData(true);\n    // setGameStarted(true);\n    // await fetchWordsAndRenderBoard(joinCode);\n    // renderGrid();\n    // setInitiateSocketingComponent(true);\n\n    // setFetchingData(false);\n  };\n\n  // const renderGrid = () => {\n  //   if (wordColorMapping === null) {\n  //     console.log('wordColorMapping is still null, cannot render the grid yet');\n  //     return null;\n  //   }\n\n  //   const words = Object.keys(wordColorMapping);\n  //   if (words.length !== 25) {\n  //     return null; // Return null if wordColorMapping is not yet populated\n  //   }\n\n  //   const grid = [];\n  //   let rowIndex = 0;\n\n  //   for (let i = 0; i < 25; i += 5) {\n  //     const row = [];\n  //     for (let j = i; j < i + 5; j++) {\n  //       const { clicked, color, position } = wordColorMapping[words[j]];\n  //       let cellStyle = {\n  //         backgroundColor: 'white',\n  //         boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n  //       };\n\n  //       if (spymasterMode || clicked) {\n  //         cellStyle.backgroundColor =\n  //           color === 'neutral' ? (color === 'black' ? 'black' : 'lightgrey') : color;\n  //         cellStyle.color = 'white';\n  //       }\n\n  //       row.push(\n  //         <div\n  //           key={position}\n  //           className=\"box\"\n  //           style={cellStyle}\n  //           onClick={() => handleCellClick(position)}\n  //         >\n  //           {words[j]}\n  //         </div>\n  //       );\n  //     }\n\n  //     grid.push(\n  //       <div key={rowIndex} className=\"grid-row\">\n  //         {row}\n  //       </div>\n  //     );\n\n  //     rowIndex++;\n  //   }\n\n  //   return grid;\n  // };\n\n  const handleToggleSpymasterMode = () => {\n    console.log(clickedCells);\n    setSpymasterMode(!spymasterMode);\n  };\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pregame\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pregame-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewGame,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"join-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinGame,\n            children: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"text\",\n            placeholder: \"Code\",\n            name: \"code\",\n            onChange: e => setJoinCode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }, this), showTest && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"WORD COLOR MAPPING!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), wordColorMapping]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Game Room: \", joinCode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Remaining Words\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 30\n          }, this), \"Blue: \", remainingBlueWords, \" | Red: \", remainingRedWords]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNewGame,\n            children: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleToggleSpymasterMode,\n            children: \"Spymaster Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this), initiateSocketingComponent && /*#__PURE__*/_jsxDEV(SocketingComponent, {\n            wordColorMapping: wordColorMapping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Turn: \", currentTurn]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 27\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: winnerMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"vdQegeto1okQzd6WDwtQyzt6YE8=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","SocketingComponent","io","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","codeEntered","setCodeEntered","joinCode","setJoinCode","clickedCells","setClickedCells","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameStarted","setGameStarted","gameOver","setGameOver","spymasterMode","setSpymasterMode","winner","setWinner","winnerMessage","setWinnerMessage","fetchingData","setFetchingData","initiateSocketingComponent","setInitiateSocketingComponent","showTest","setShowTest","BLUE_WORD_COUNT","RED_WORD_COUNT","joinGame","response","fetch","data","json","wordColorMappingArray","Promise","all","Object","entries","word_color_mapping","map","_ref","word","color","console","log","createGame","_ref2","handleNewGame","handleJoinGame","handleToggleSpymasterMode","calculateRemainingWords","teamScore","totalWords","remainingBlueWords","remainingRedWords","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","name","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport SocketingComponent from './SocketingComponent';\nimport io from 'socket.io-client';\n\n\nconst CodeNames = () => {\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  const [codeEntered, setCodeEntered] = useState('');\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false)\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [fetchingData, setFetchingData] = useState(true);\n  const [initiateSocketingComponent, setInitiateSocketingComponent] = useState(false);\n  const [showTest, setShowTest] = useState(false)\n\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n\n\n  const joinGame = async (codeEntered) => {\n    const response = await fetch(`/join_game/${codeEntered}`)\n    const data = await response.json();\n    const wordColorMappingArray = await Promise.all(\n      Object.entries(data.word_color_mapping).map(async ([word, color]) => {\n        return { word, color };\n      }))\n    console.log(wordColorMappingArray)\n  }\n\n  const createGame = async () => {\n    const response = await fetch(`/create_new_game`)\n    const data = await response.json();\n    const wordColorMappingArray = await Promise.all(\n      Object.entries(data.word_color_mapping).map(async ([word, color]) => {\n        return { word, color };\n      }))\n    console.log(wordColorMappingArray)\n  }\n\n  // Create the Word Color Mapping for the first time\n  // const createNewGameBoardAndSession = async () => {\n  //   try {\n  //     const response = await fetch('http://127.0.0.1:5000/create_new_game');\n\n  //     if (!response.ok) {\n  //       throw new Error(`Failed to fetch word color mapping. Status: ${response.status} - ${response.statusText}`);\n  //     }\n  //     const data = await response.json();\n  //     setJoinCode(data.room)\n  //     const wordColorMappingArray = await Promise.all(\n  //       Object.entries(data.word_color_mapping).map(async ([word, color]) => {\n  //         return { word, color };\n  //       })\n  //     );\n  //     setWordColorMapping(wordColorMappingArray)\n  //     const socket = io();\n  //     socket.emit('wordColorMapping', { word_color_mapping: wordColorMappingArray },\n  //       'room', joinCode);\n  //   } catch (error) {\n  //     console.error('Error fetching word color mapping:', error);\n  //   }\n  // };\n\n  // const fetchWordsAndRenderBoard = async (joinCode) => {\n  //   const retrieveData = async (joinCode) => {\n  //     const response = await fetch(`http://127.0.0.1:5000/retrieve_data?room_code=${joinCode}`);\n  //     const data = await response.json();\n  //     console.log(data)\n  //     const wordColorMappingArray = await Promise.all(\n  //       Object.entries(data.word_color_mapping).map(async ([word, color]) => {\n  //         return { word, color };\n  //       })\n  //     );\n  //     setWordColorMapping(wordColorMappingArray)\n  //     console.log('Retrieved data:', wordColorMappingArray);\n  //   };\n  //   // Call the function and pass the room code\n  //   retrieveData(joinCode);\n  // };\n\n  // useEffect(() => {\n  //   if (wordColorMapping.length === 25) {\n  //     renderGrid();\n  //   }\n  // }, [fetchingData, wordColorMapping]);\n\n  // const handleCellClick = (index) => {\n  //   if (gameOver || (spymasterMode && clickedCells[index])) {\n  //     return;\n  //   }\n\n  //   if (clickedCells[index]) {\n  //     return; // Cell has already been clicked\n  //   }\n\n  //   if (spymasterMode) {\n  //     return; // Disallow cell click in Spymaster Mode\n  //   }\n\n  //   const updatedClickedCells = [...clickedCells];\n  //   updatedClickedCells[index] = true;\n  //   setClickedCells(updatedClickedCells);\n\n  //   if (wordColorMapping.length === 25) {\n  //     const { color } = wordColorMapping[index];\n\n  //     if (color === 'black') {\n  //       if (currentTurn === 'blue') {\n  //         setWinner('red');\n  //         setWinnerMessage('Red Wins!');\n  //       } else {\n  //         setWinner('blue');\n  //         setWinnerMessage('Blue Wins!');\n  //       }\n  //       setGameOver(true);\n  //     } else if (color === 'blue') {\n  //       setBlueScore(blueScore + 1);\n  //       if (blueScore + 1 === BLUE_WORD_COUNT) {\n  //         setWinner('blue');\n  //         setWinnerMessage('Blue Wins!');\n  //         setGameOver(true);\n  //       }\n  //     } else if (color === 'red') {\n  //       setRedScore(redScore + 1);\n  //       if (redScore + 1 === RED_WORD_COUNT) {\n  //         setWinner('red');\n  //         setWinnerMessage('Red Wins!');\n  //         setGameOver(true);\n  //       }\n  //     }\n  //     if (currentTurn !== color && color !== 'black') {\n  //       setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n  //     }\n  //   }\n  // };\n\n  const handleNewGame = async () => {\n    createGame();\n    setShowTest(true)\n    // setFetchingData(true);\n    // createNewGameBoardAndSession();\n    // setCurrentTurn('blue');\n    // setBlueScore(0);\n    // setRedScore(0);\n    // setGameOver(false);\n    // setGameStarted(true);\n    // setInitiateSocketingComponent(true);\n    // setFetchingData(false);\n  };\n\n  const handleJoinGame = async () => {\n    joinGame(joinCode)\n    setShowTest(true)\n    // setFetchingData(true);\n    // setGameStarted(true);\n    // await fetchWordsAndRenderBoard(joinCode);\n    // renderGrid();\n    // setInitiateSocketingComponent(true);\n\n    // setFetchingData(false);\n  };\n\n  // const renderGrid = () => {\n  //   if (wordColorMapping === null) {\n  //     console.log('wordColorMapping is still null, cannot render the grid yet');\n  //     return null;\n  //   }\n\n  //   const words = Object.keys(wordColorMapping);\n  //   if (words.length !== 25) {\n  //     return null; // Return null if wordColorMapping is not yet populated\n  //   }\n\n  //   const grid = [];\n  //   let rowIndex = 0;\n\n  //   for (let i = 0; i < 25; i += 5) {\n  //     const row = [];\n  //     for (let j = i; j < i + 5; j++) {\n  //       const { clicked, color, position } = wordColorMapping[words[j]];\n  //       let cellStyle = {\n  //         backgroundColor: 'white',\n  //         boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n  //       };\n\n  //       if (spymasterMode || clicked) {\n  //         cellStyle.backgroundColor =\n  //           color === 'neutral' ? (color === 'black' ? 'black' : 'lightgrey') : color;\n  //         cellStyle.color = 'white';\n  //       }\n\n  //       row.push(\n  //         <div\n  //           key={position}\n  //           className=\"box\"\n  //           style={cellStyle}\n  //           onClick={() => handleCellClick(position)}\n  //         >\n  //           {words[j]}\n  //         </div>\n  //       );\n  //     }\n\n  //     grid.push(\n  //       <div key={rowIndex} className=\"grid-row\">\n  //         {row}\n  //       </div>\n  //     );\n\n  //     rowIndex++;\n  //   }\n\n  //   return grid;\n  // };\n\n\n  const handleToggleSpymasterMode = () => {\n    console.log(clickedCells)\n    setSpymasterMode(!spymasterMode);\n  };\n\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n\n  return (\n\n    <div className=\"codenames\">\n\n      <h1>Code Names</h1>\n\n      {!gameStarted &&\n        <div className=\"pregame\">\n          <div className=\"pregame-buttons\">\n            <button onClick={handleNewGame}>Create Game</button>\n            <div className=\"join-game\">\n              <button onClick={handleJoinGame}>Join Game</button>\n              <input className=\"input\" type=\"text\" placeholder=\"Code\" name=\"code\" onChange={(e) => setJoinCode(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n      }\n\n      {showTest &&\n        <div>\n          <h1>\n            WORD COLOR MAPPING!\n          </h1>\n          {wordColorMapping}\n        </div>\n      }\n\n      {gameStarted &&\n        <div>\n          <h2>Game Room: {joinCode}</h2>\n          <div>\n            <h4>\n              Remaining Words<br />\n              Blue: {remainingBlueWords} | Red: {remainingRedWords}\n            </h4>\n            {/* <div className=\"codenames-board\">\n              {wordColorMapping.length === 25 &&\n                <div className=\"codenames-grid\">{renderGrid()}</div>}\n            </div> */}\n            <div>\n              <button onClick={handleNewGame}>Create Game</button>\n              <button onClick={handleToggleSpymasterMode}>Spymaster Mode</button>\n              {initiateSocketingComponent && <SocketingComponent wordColorMapping={wordColorMapping} />}\n            </div>\n            {!gameOver && <h4>Turn: {currentTurn}</h4>}\n            {gameOver && <h4>{winnerMessage}</h4>}\n          </div>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default CodeNames;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}