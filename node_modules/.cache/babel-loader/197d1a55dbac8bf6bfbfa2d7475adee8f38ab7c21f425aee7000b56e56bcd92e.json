{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport SocketingComponent from './SocketingComponent';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  let [words, setWords] = useState([]);\n  const [codeEntered, setCodeEntered] = useState('');\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [fetchingData, setFetchingData] = useState(true);\n  const [initiateSocketingComponent, setInitiateSocketingComponent] = useState(false);\n  const [showTest, setShowTest] = useState(false);\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n  const createGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/create_new_game`);\n      if (!response) {\n        throw new Error('Create game didnt work');\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n    } catch (error) {\n      console.log(\"There was an error with create new game\");\n    }\n  };\n  const joinGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/join_game/${joinCode}`);\n      if (!response) {\n        throw new Error('Join didnt work');\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n      setWords(Object.keys(wordColorMapping['word_color_mapping']));\n    } catch (error) {\n      console.log(\"There was an error with join game\");\n    }\n  };\n  useEffect(() => {\n    if (wordColorMapping.length !== 0) {\n      console.log(\"Game info retrieved from server\");\n      setWords(Object.keys(wordColorMapping['word_color_mapping']));\n    }\n  }, [wordColorMapping]);\n  useEffect(() => {\n    if (words.length === 25) {\n      console.log(words);\n      renderGrid();\n    }\n  }, [words]);\n  const renderGrid = async () => {\n    console.log(\"We are making a grid\");\n    console.log(wordColorMapping);\n    const grid = [];\n    let rowIndex = 0;\n    for (let i = 0; i < 25; i += 5) {\n      let row = [];\n      for (let j = i; j < i + 5; j++) {\n        console.log(words[i]);\n        console.log(wordColorMapping['word_color_mapping'][words[i]]['clicked']);\n        console.log(wordColorMapping['word_color_mapping'][words[i]]['color']);\n        console.log(wordColorMapping['word_color_mapping'][words[i]]['position']);\n        let word = words[i];\n        let clicked = wordColorMapping['word_color_mapping'][words[i]]['clicked'];\n        let color = wordColorMapping['word_color_mapping'][words[i]]['color'];\n        let position = wordColorMapping['word_color_mapping'][words[i]]['position'];\n        let cellStyle = {\n          backgroundColor: 'white',\n          boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)'\n        };\n        if (spymasterMode || clicked) {\n          cellStyle.backgroundColor = color === 'neutral' ? color === 'black' ? 'black' : 'lightgrey' : color;\n          cellStyle.color = 'white';\n        }\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          style: cellStyle,\n          onClick: () => handleCellClick(position),\n          children: words[j]\n        }, position, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    grid.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this));\n    rowIndex++;\n    return grid;\n  };\n  //   for (let i = 0; i < 25; i += 5) {\n  //     const row = [];\n  //     for (let j = i; j < i + 5; j++) {\n  //       const { clicked, color, position } = wordColorMapping[words[j]];\n  //       console.log(wordColorMapping[words[j]])\n  //       let cellStyle = {\n  //         backgroundColor: 'white',\n  //         boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n  //       };\n\n  //       if (spymasterMode || clicked) {\n  //         cellStyle.backgroundColor =\n  //           color === 'neutral' ? (color === 'black' ? 'black' : 'lightgrey') : color;\n  //         cellStyle.color = 'white';\n  //       }\n\n  //       row.push(\n  //         <div\n  //           key={position}\n  //           className=\"box\"\n  //           style={cellStyle}\n  //           onClick={() => handleCellClick(position)}\n  //         >\n  //           {words[j]}\n  //         </div>\n  //       );\n  //     }\n\n  //     grid.push(\n  //       <div key={rowIndex} className=\"grid-row\">\n  //         {row}\n  //       </div>\n  //     );\n\n  //     rowIndex++;\n  //   }\n\n  //   return grid;\n\n  // }\n\n  const handleCellClick = index => {\n    if (gameOver || spymasterMode && clickedCells[index]) {\n      return;\n    }\n    if (clickedCells[index]) {\n      return; // Cell has already been clicked\n    }\n\n    if (spymasterMode) {\n      return; // Disallow cell click in Spymaster Mode\n    }\n\n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n    if (wordColorMapping.length === 25) {\n      const {\n        color\n      } = wordColorMapping[index];\n      if (color === 'black') {\n        if (currentTurn === 'blue') {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n        } else {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n        }\n        setGameOver(true);\n      } else if (color === 'blue') {\n        setBlueScore(blueScore + 1);\n        if (blueScore + 1 === BLUE_WORD_COUNT) {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n          setGameOver(true);\n        }\n      } else if (color === 'red') {\n        setRedScore(redScore + 1);\n        if (redScore + 1 === RED_WORD_COUNT) {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n          setGameOver(true);\n        }\n      }\n      if (currentTurn !== color && color !== 'black') {\n        setCurrentTurn(prevTurn => prevTurn === 'blue' ? 'red' : 'blue');\n      }\n    }\n  };\n  const handleNewGame = async () => {\n    createGame();\n    setShowTest(true);\n    setFetchingData(true);\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n    // setInitiateSocketingComponent(true);\n    setFetchingData(false);\n  };\n  const handleJoinGame = async () => {\n    joinGame(joinCode);\n    setShowTest(true);\n    // setFetchingData(true);\n    setGameStarted(true);\n    // await fetchWordsAndRenderBoard(joinCode);\n    // setInitiateSocketingComponent(true);\n\n    // setFetchingData(false);\n  };\n\n  const handleToggleSpymasterMode = () => {\n    console.log(clickedCells);\n    setSpymasterMode(!spymasterMode);\n  };\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pregame\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pregame-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewGame,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"join-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinGame,\n            children: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"text\",\n            placeholder: \"Code\",\n            name: \"code\",\n            onChange: e => setJoinCode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }, this), showTest && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"WORD COLOR MAPPING!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Game Room: \", joinCode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Remaining Words\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 30\n          }, this), \"Blue: \", remainingBlueWords, \" | Red: \", remainingRedWords]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"codenames-board\",\n          children: wordColorMapping.length === 25 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"codenames-grid\",\n            children: renderGrid()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNewGame,\n            children: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleToggleSpymasterMode,\n            children: \"Spymaster Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this), initiateSocketingComponent && /*#__PURE__*/_jsxDEV(SocketingComponent, {\n            wordColorMapping: wordColorMapping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Turn: \", currentTurn]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 27\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: winnerMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"8c/nrOdbYKhZV8PjOooVxrUfFWg=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","SocketingComponent","io","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","words","setWords","codeEntered","setCodeEntered","joinCode","setJoinCode","clickedCells","setClickedCells","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameStarted","setGameStarted","gameOver","setGameOver","spymasterMode","setSpymasterMode","winner","setWinner","winnerMessage","setWinnerMessage","fetchingData","setFetchingData","initiateSocketingComponent","setInitiateSocketingComponent","showTest","setShowTest","BLUE_WORD_COUNT","RED_WORD_COUNT","createGame","response","fetch","Error","data","json","error","console","log","joinGame","Object","keys","length","renderGrid","grid","rowIndex","i","row","j","word","clicked","color","position","cellStyle","backgroundColor","boxShadow","push","className","style","onClick","handleCellClick","children","fileName","_jsxFileName","lineNumber","columnNumber","index","updatedClickedCells","prevTurn","handleNewGame","handleJoinGame","handleToggleSpymasterMode","calculateRemainingWords","teamScore","totalWords","remainingBlueWords","remainingRedWords","type","placeholder","name","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport SocketingComponent from './SocketingComponent';\nimport io from 'socket.io-client';\n\n\nconst CodeNames = () => {\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  let [words, setWords] = useState([]);\n  const [codeEntered, setCodeEntered] = useState('');\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false)\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [fetchingData, setFetchingData] = useState(true);\n  const [initiateSocketingComponent, setInitiateSocketingComponent] = useState(false);\n  const [showTest, setShowTest] = useState(false)\n\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n\n  const createGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/create_new_game`)\n      if (!response) {\n        throw new Error('Create game didnt work')\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n    }\n    catch (error) {\n      console.log(\"There was an error with create new game\")\n    }\n  }\n\n  const joinGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/join_game/${joinCode}`)\n      if (!response) {\n        throw new Error('Join didnt work')\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n      setWords(Object.keys(wordColorMapping['word_color_mapping']))\n\n    }\n    catch (error) {\n      console.log(\"There was an error with join game\")\n    }\n  }\n\n  useEffect(() => {\n    if (wordColorMapping.length !== 0) {\n      console.log(\"Game info retrieved from server\")\n      setWords(Object.keys(wordColorMapping['word_color_mapping']))\n    }\n  }, [wordColorMapping]);\n\n  useEffect(() => {\n    if (words.length === 25) {\n      console.log(words)\n      renderGrid()\n    }\n  }, [words])\n\n  const renderGrid = async () => {\n    console.log(\"We are making a grid\")\n    console.log(wordColorMapping)\n    const grid = [];\n    let rowIndex = 0;\n    for (let i = 0; i < 25; i += 5) {\n      let row = []\n      for (let j = i; j < i + 5; j++) {\n        console.log(words[i])\n        console.log(wordColorMapping['word_color_mapping'][words[i]]['clicked'])\n        console.log(wordColorMapping['word_color_mapping'][words[i]]['color'])\n        console.log(wordColorMapping['word_color_mapping'][words[i]]['position'])\n        let word = words[i]\n        let clicked = wordColorMapping['word_color_mapping'][words[i]]['clicked']\n        let color = wordColorMapping['word_color_mapping'][words[i]]['color']\n        let position = wordColorMapping['word_color_mapping'][words[i]]['position']\n        let cellStyle = {\n          backgroundColor: 'white',\n          boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n        };\n        if (spymasterMode || clicked) {\n          cellStyle.backgroundColor =\n            color === 'neutral' ? (color === 'black' ? 'black' : 'lightgrey') : color;\n          cellStyle.color = 'white';\n        }\n        row.push(\n          <div\n            key={position}\n            className=\"box\"\n            style={cellStyle}\n            onClick={() => handleCellClick(position)}\n          >\n            {words[j]}\n          </div>\n        );\n      }\n    }\n    grid.push(\n      <div key={rowIndex} className=\"grid-row\">\n        {row}\n      </div>\n    );\n\n    rowIndex++;\n\n    return grid;\n\n  }\n  //   for (let i = 0; i < 25; i += 5) {\n  //     const row = [];\n  //     for (let j = i; j < i + 5; j++) {\n  //       const { clicked, color, position } = wordColorMapping[words[j]];\n  //       console.log(wordColorMapping[words[j]])\n  //       let cellStyle = {\n  //         backgroundColor: 'white',\n  //         boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n  //       };\n\n  //       if (spymasterMode || clicked) {\n  //         cellStyle.backgroundColor =\n  //           color === 'neutral' ? (color === 'black' ? 'black' : 'lightgrey') : color;\n  //         cellStyle.color = 'white';\n  //       }\n\n  //       row.push(\n  //         <div\n  //           key={position}\n  //           className=\"box\"\n  //           style={cellStyle}\n  //           onClick={() => handleCellClick(position)}\n  //         >\n  //           {words[j]}\n  //         </div>\n  //       );\n  //     }\n\n  //     grid.push(\n  //       <div key={rowIndex} className=\"grid-row\">\n  //         {row}\n  //       </div>\n  //     );\n\n  //     rowIndex++;\n  //   }\n\n  //   return grid;\n\n  // }\n\n\n\n\n\n\n\n  const handleCellClick = (index) => {\n    if (gameOver || (spymasterMode && clickedCells[index])) {\n      return;\n    }\n\n    if (clickedCells[index]) {\n      return; // Cell has already been clicked\n    }\n\n    if (spymasterMode) {\n      return; // Disallow cell click in Spymaster Mode\n    }\n\n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n\n    if (wordColorMapping.length === 25) {\n      const { color } = wordColorMapping[index];\n\n      if (color === 'black') {\n        if (currentTurn === 'blue') {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n        } else {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n        }\n        setGameOver(true);\n      } else if (color === 'blue') {\n        setBlueScore(blueScore + 1);\n        if (blueScore + 1 === BLUE_WORD_COUNT) {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n          setGameOver(true);\n        }\n      } else if (color === 'red') {\n        setRedScore(redScore + 1);\n        if (redScore + 1 === RED_WORD_COUNT) {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n          setGameOver(true);\n        }\n      }\n      if (currentTurn !== color && color !== 'black') {\n        setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n      }\n    }\n  };\n\n  const handleNewGame = async () => {\n    createGame();\n    setShowTest(true)\n    setFetchingData(true);\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n    // setInitiateSocketingComponent(true);\n    setFetchingData(false);\n  };\n\n  const handleJoinGame = async () => {\n    joinGame(joinCode)\n    setShowTest(true)\n    // setFetchingData(true);\n    setGameStarted(true);\n    // await fetchWordsAndRenderBoard(joinCode);\n    // setInitiateSocketingComponent(true);\n\n    // setFetchingData(false);\n  };\n\n\n  const handleToggleSpymasterMode = () => {\n    console.log(clickedCells)\n    setSpymasterMode(!spymasterMode);\n  };\n\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n\n  return (\n\n    <div className=\"codenames\">\n\n      <h1>Code Names</h1>\n\n      {!gameStarted &&\n        <div className=\"pregame\">\n          <div className=\"pregame-buttons\">\n            <button onClick={handleNewGame}>Create Game</button>\n            <div className=\"join-game\">\n              <button onClick={handleJoinGame}>Join Game</button>\n              <input className=\"input\" type=\"text\" placeholder=\"Code\" name=\"code\" onChange={(e) => setJoinCode(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n      }\n\n      {showTest &&\n        <div>\n          <h1>\n            WORD COLOR MAPPING!\n          </h1>\n          {/* <p>{wordColorMapping}</p> */}\n        </div>\n      }\n\n      {gameStarted &&\n        <div>\n          <h2>Game Room: {joinCode}</h2>\n          <div>\n            <h4>\n              Remaining Words<br />\n              Blue: {remainingBlueWords} | Red: {remainingRedWords}\n            </h4>\n            <div className=\"codenames-board\">\n              {wordColorMapping.length === 25 &&\n                <div className=\"codenames-grid\">{renderGrid()}</div>}\n            </div>\n            <div>\n              <button onClick={handleNewGame}>Create Game</button>\n              <button onClick={handleToggleSpymasterMode}>Spymaster Mode</button>\n              {initiateSocketingComponent && <SocketingComponent wordColorMapping={wordColorMapping} />}\n            </div>\n            {!gameOver && <h4>Turn: {currentTurn}</h4>}\n            {gameOver && <h4>{winnerMessage}</h4>}\n          </div>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default CodeNames;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,cAAc;AACrB,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,IAAI,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1D,IAAI,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,MAAM,CAAC;EACtD,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACsB,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC4B,aAAa,EAAEC,gBAAgB,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAAC8B,MAAM,EAAEC,SAAS,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACgC,aAAa,EAAEC,gBAAgB,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACkC,YAAY,EAAEC,eAAe,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACoC,0BAA0B,EAAEC,6BAA6B,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EACnF,MAAM,CAACsC,QAAQ,EAAEC,WAAW,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMwC,eAAe,GAAG,CAAC;EACzB,MAAMC,cAAc,GAAG,CAAC;EAExB,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAsC,CAAC;MACrE,IAAI,CAACD,QAAQ,EAAE;QACb,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MACA,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;MAClCtC,mBAAmB,CAACqC,IAAI,CAAC;IAC3B,CAAC,CACD,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACxD;EACF,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkC9B,QAAS,EAAC,CAAC;MAC3E,IAAI,CAAC6B,QAAQ,EAAE;QACb,MAAM,IAAIE,KAAK,CAAC,iBAAiB,CAAC;MACpC;MACA,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;MAClCtC,mBAAmB,CAACqC,IAAI,CAAC;MACzBnC,QAAQ,CAACyC,MAAM,CAACC,IAAI,CAAC7C,gBAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAE/D,CAAC,CACD,OAAOwC,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD;EACF,CAAC;EAEDjD,SAAS,CAAC,MAAM;IACd,IAAIO,gBAAgB,CAAC8C,MAAM,KAAK,CAAC,EAAE;MACjCL,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9CvC,QAAQ,CAACyC,MAAM,CAACC,IAAI,CAAC7C,gBAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAC/D;EACF,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EAEtBP,SAAS,CAAC,MAAM;IACd,IAAIS,KAAK,CAAC4C,MAAM,KAAK,EAAE,EAAE;MACvBL,OAAO,CAACC,GAAG,CAACxC,KAAK,CAAC;MAClB6C,UAAU,EAAE;IACd;EACF,CAAC,EAAE,CAAC7C,KAAK,CAAC,CAAC;EAEX,MAAM6C,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7BN,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCD,OAAO,CAACC,GAAG,CAAC1C,gBAAgB,CAAC;IAC7B,MAAMgD,IAAI,GAAG,EAAE;IACf,IAAIC,QAAQ,GAAG,CAAC;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,CAAC,EAAE;MAC9B,IAAIC,GAAG,GAAG,EAAE;MACZ,KAAK,IAAIC,CAAC,GAAGF,CAAC,EAAEE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,EAAE,EAAE;QAC9BX,OAAO,CAACC,GAAG,CAACxC,KAAK,CAACgD,CAAC,CAAC,CAAC;QACrBT,OAAO,CAACC,GAAG,CAAC1C,gBAAgB,CAAC,oBAAoB,CAAC,CAACE,KAAK,CAACgD,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QACxET,OAAO,CAACC,GAAG,CAAC1C,gBAAgB,CAAC,oBAAoB,CAAC,CAACE,KAAK,CAACgD,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QACtET,OAAO,CAACC,GAAG,CAAC1C,gBAAgB,CAAC,oBAAoB,CAAC,CAACE,KAAK,CAACgD,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;QACzE,IAAIG,IAAI,GAAGnD,KAAK,CAACgD,CAAC,CAAC;QACnB,IAAII,OAAO,GAAGtD,gBAAgB,CAAC,oBAAoB,CAAC,CAACE,KAAK,CAACgD,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACzE,IAAIK,KAAK,GAAGvD,gBAAgB,CAAC,oBAAoB,CAAC,CAACE,KAAK,CAACgD,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QACrE,IAAIM,QAAQ,GAAGxD,gBAAgB,CAAC,oBAAoB,CAAC,CAACE,KAAK,CAACgD,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;QAC3E,IAAIO,SAAS,GAAG;UACdC,eAAe,EAAE,OAAO;UACxBC,SAAS,EAAE;QACb,CAAC;QACD,IAAIvC,aAAa,IAAIkC,OAAO,EAAE;UAC5BG,SAAS,CAACC,eAAe,GACvBH,KAAK,KAAK,SAAS,GAAIA,KAAK,KAAK,OAAO,GAAG,OAAO,GAAG,WAAW,GAAIA,KAAK;UAC3EE,SAAS,CAACF,KAAK,GAAG,OAAO;QAC3B;QACAJ,GAAG,CAACS,IAAI,eACN/D,OAAA;UAEEgE,SAAS,EAAC,KAAK;UACfC,KAAK,EAAEL,SAAU;UACjBM,OAAO,EAAEA,CAAA,KAAMC,eAAe,CAACR,QAAQ,CAAE;UAAAS,QAAA,EAExC/D,KAAK,CAACkD,CAAC;QAAC,GALJI,QAAQ;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAMT,CACP;MACH;IACF;IACArB,IAAI,CAACY,IAAI,eACP/D,OAAA;MAAoBgE,SAAS,EAAC,UAAU;MAAAI,QAAA,EACrCd;IAAG,GADIF,QAAQ;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEZ,CACP;IAEDpB,QAAQ,EAAE;IAEV,OAAOD,IAAI;EAEb,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;;EAQA,MAAMgB,eAAe,GAAIM,KAAK,IAAK;IACjC,IAAIpD,QAAQ,IAAKE,aAAa,IAAIZ,YAAY,CAAC8D,KAAK,CAAE,EAAE;MACtD;IACF;IAEA,IAAI9D,YAAY,CAAC8D,KAAK,CAAC,EAAE;MACvB,OAAO,CAAC;IACV;;IAEA,IAAIlD,aAAa,EAAE;MACjB,OAAO,CAAC;IACV;;IAEA,MAAMmD,mBAAmB,GAAG,CAAC,GAAG/D,YAAY,CAAC;IAC7C+D,mBAAmB,CAACD,KAAK,CAAC,GAAG,IAAI;IACjC7D,eAAe,CAAC8D,mBAAmB,CAAC;IAEpC,IAAIvE,gBAAgB,CAAC8C,MAAM,KAAK,EAAE,EAAE;MAClC,MAAM;QAAES;MAAM,CAAC,GAAGvD,gBAAgB,CAACsE,KAAK,CAAC;MAEzC,IAAIf,KAAK,KAAK,OAAO,EAAE;QACrB,IAAI7C,WAAW,KAAK,MAAM,EAAE;UAC1Ba,SAAS,CAAC,KAAK,CAAC;UAChBE,gBAAgB,CAAC,WAAW,CAAC;QAC/B,CAAC,MAAM;UACLF,SAAS,CAAC,MAAM,CAAC;UACjBE,gBAAgB,CAAC,YAAY,CAAC;QAChC;QACAN,WAAW,CAAC,IAAI,CAAC;MACnB,CAAC,MAAM,IAAIoC,KAAK,KAAK,MAAM,EAAE;QAC3B1C,YAAY,CAACD,SAAS,GAAG,CAAC,CAAC;QAC3B,IAAIA,SAAS,GAAG,CAAC,KAAKoB,eAAe,EAAE;UACrCT,SAAS,CAAC,MAAM,CAAC;UACjBE,gBAAgB,CAAC,YAAY,CAAC;UAC9BN,WAAW,CAAC,IAAI,CAAC;QACnB;MACF,CAAC,MAAM,IAAIoC,KAAK,KAAK,KAAK,EAAE;QAC1BxC,WAAW,CAACD,QAAQ,GAAG,CAAC,CAAC;QACzB,IAAIA,QAAQ,GAAG,CAAC,KAAKmB,cAAc,EAAE;UACnCV,SAAS,CAAC,KAAK,CAAC;UAChBE,gBAAgB,CAAC,WAAW,CAAC;UAC7BN,WAAW,CAAC,IAAI,CAAC;QACnB;MACF;MACA,IAAIT,WAAW,KAAK6C,KAAK,IAAIA,KAAK,KAAK,OAAO,EAAE;QAC9C5C,cAAc,CAAE6D,QAAQ,IAAMA,QAAQ,KAAK,MAAM,GAAG,KAAK,GAAG,MAAO,CAAC;MACtE;IACF;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChCvC,UAAU,EAAE;IACZH,WAAW,CAAC,IAAI,CAAC;IACjBJ,eAAe,CAAC,IAAI,CAAC;IACrBhB,cAAc,CAAC,MAAM,CAAC;IACtBE,YAAY,CAAC,CAAC,CAAC;IACfE,WAAW,CAAC,CAAC,CAAC;IACdI,WAAW,CAAC,KAAK,CAAC;IAClBF,cAAc,CAAC,IAAI,CAAC;IACpB;IACAU,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,MAAM+C,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC/B,QAAQ,CAACrC,QAAQ,CAAC;IAClByB,WAAW,CAAC,IAAI,CAAC;IACjB;IACAd,cAAc,CAAC,IAAI,CAAC;IACpB;IACA;;IAEA;EACF,CAAC;;EAGD,MAAM0D,yBAAyB,GAAGA,CAAA,KAAM;IACtClC,OAAO,CAACC,GAAG,CAAClC,YAAY,CAAC;IACzBa,gBAAgB,CAAC,CAACD,aAAa,CAAC;EAClC,CAAC;EAED,MAAMwD,uBAAuB,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAK;IACzD,OAAOA,UAAU,GAAGD,SAAS;EAC/B,CAAC;EAED,MAAME,kBAAkB,GAAGH,uBAAuB,CAAChE,SAAS,EAAEoB,eAAe,CAAC;EAC9E,MAAMgD,iBAAiB,GAAGJ,uBAAuB,CAAC9D,QAAQ,EAAEmB,cAAc,CAAC;EAE3E,oBAEEpC,OAAA;IAAKgE,SAAS,EAAC,WAAW;IAAAI,QAAA,gBAExBpE,OAAA;MAAAoE,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAElB,CAACrD,WAAW,iBACXnB,OAAA;MAAKgE,SAAS,EAAC,SAAS;MAAAI,QAAA,eACtBpE,OAAA;QAAKgE,SAAS,EAAC,iBAAiB;QAAAI,QAAA,gBAC9BpE,OAAA;UAAQkE,OAAO,EAAEU,aAAc;UAAAR,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eACpDxE,OAAA;UAAKgE,SAAS,EAAC,WAAW;UAAAI,QAAA,gBACxBpE,OAAA;YAAQkE,OAAO,EAAEW,cAAe;YAAAT,QAAA,EAAC;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eACnDxE,OAAA;YAAOgE,SAAS,EAAC,OAAO;YAACoB,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC,MAAM;YAACC,IAAI,EAAC,MAAM;YAACC,QAAQ,EAAGC,CAAC,IAAK9E,WAAW,CAAC8E,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAC/G;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF,EAGPvC,QAAQ,iBACPjC,OAAA;MAAAoE,QAAA,eACEpE,OAAA;QAAAoE,QAAA,EAAI;MAEJ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAED,EAGPrD,WAAW,iBACVnB,OAAA;MAAAoE,QAAA,gBACEpE,OAAA;QAAAoE,QAAA,GAAI,aAAW,EAAC3D,QAAQ;MAAA;QAAA4D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAC9BxE,OAAA;QAAAoE,QAAA,gBACEpE,OAAA;UAAAoE,QAAA,GAAI,iBACa,eAAApE,OAAA;YAAAqE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,UACf,EAACU,kBAAkB,EAAC,UAAQ,EAACC,iBAAiB;QAAA;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACjD,eACLxE,OAAA;UAAKgE,SAAS,EAAC,iBAAiB;UAAAI,QAAA,EAC7BjE,gBAAgB,CAAC8C,MAAM,KAAK,EAAE,iBAC7BjD,OAAA;YAAKgE,SAAS,EAAC,gBAAgB;YAAAI,QAAA,EAAElB,UAAU;UAAE;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAO;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAClD,eACNxE,OAAA;UAAAoE,QAAA,gBACEpE,OAAA;YAAQkE,OAAO,EAAEU,aAAc;YAAAR,QAAA,EAAC;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eACpDxE,OAAA;YAAQkE,OAAO,EAAEY,yBAA0B;YAAAV,QAAA,EAAC;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,EAClEzC,0BAA0B,iBAAI/B,OAAA,CAACH,kBAAkB;YAACM,gBAAgB,EAAEA;UAAiB;YAAAkE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAG;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACrF,EACL,CAACnD,QAAQ,iBAAIrB,OAAA;UAAAoE,QAAA,GAAI,QAAM,EAACvD,WAAW;QAAA;UAAAwD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,EACzCnD,QAAQ,iBAAIrB,OAAA;UAAAoE,QAAA,EAAKzC;QAAa;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEJ;AAEV,CAAC;AAACtE,EAAA,CA3SID,SAAS;AAAA0F,EAAA,GAAT1F,SAAS;AA6Sf,eAAeA,SAAS;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}