{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport SocketingComponent from './SocketingComponent';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  const [codeEntered, setCodeEntered] = useState('');\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [fetchingData, setFetchingData] = useState(true);\n  const [initiateSocketingComponent, setInitiateSocketingComponent] = useState(false);\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n\n  // Create the Word Color Mapping for the first time\n  const fetchWordColorMapping = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch word color mapping. Status: ${response.status} - ${response.statusText}`);\n      }\n      const data = await response.json();\n      setJoinCode(data.room);\n      const wordColorMappingArray = await Promise.all(Object.entries(data.word_color_mapping).map(async _ref => {\n        let [word, color] = _ref;\n        return {\n          word,\n          color\n        };\n      }));\n      setWordColorMapping(wordColorMappingArray);\n      const socket = io();\n      socket.emit('wordColorMapping', {\n        word_color_mapping: wordColorMappingArray\n      }, 'room', joinCode);\n    } catch (error) {\n      console.error('Error fetching word color mapping:', error);\n    }\n  };\n  useEffect(() => {\n    if (wordColorMapping.length === 25) {\n      console.log(\"This is useEffect. Render the grid!\");\n      renderGrid();\n    }\n  }, [fetchingData, wordColorMapping]);\n  const handleCellClick = index => {\n    if (gameOver || spymasterMode && clickedCells[index]) {\n      return;\n    }\n    if (clickedCells[index]) {\n      return; // Cell has already been clicked\n    }\n\n    if (spymasterMode) {\n      return; // Disallow cell click in Spymaster Mode\n    }\n\n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n    if (wordColorMapping.length === 25) {\n      const {\n        color\n      } = wordColorMapping[index];\n      if (color === 'black') {\n        if (currentTurn === 'blue') {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n        } else {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n        }\n        setGameOver(true);\n      } else if (color === 'blue') {\n        setBlueScore(blueScore + 1);\n        if (blueScore + 1 === BLUE_WORD_COUNT) {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n          setGameOver(true);\n        }\n      } else if (color === 'red') {\n        setRedScore(redScore + 1);\n        if (redScore + 1 === RED_WORD_COUNT) {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n          setGameOver(true);\n        }\n      }\n      if (currentTurn !== color && color !== 'black') {\n        setCurrentTurn(prevTurn => prevTurn === 'blue' ? 'red' : 'blue');\n      }\n    }\n  };\n  const handleNewGame = () => {\n    setFetchingData(true);\n    fetchWordColorMapping();\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n    setInitiateSocketingComponent(true);\n    setFetchingData(false);\n  };\n  const handleJoinGame = async () => {\n    setFetchingData(true);\n    setGameStarted(true);\n    await fetchAndRenderBoard(joinCode);\n    renderGrid();\n    setInitiateSocketingComponent(true);\n    setFetchingData(false);\n  };\n  const fetchAndRenderBoard = async joinCode => {\n    const retrieveData = async joinCode => {\n      const response = await fetch(`http://127.0.0.1:5000/retrieve_data?room_code=${joinCode}`);\n      const data = await response.json();\n      const wordColorMappingArray = await Promise.all(Object.entries(data.word_color_mapping).map(async _ref2 => {\n        let [word, color] = _ref2;\n        return {\n          word,\n          color\n        };\n      }));\n      setWordColorMapping(wordColorMappingArray);\n      console.log('Retrieved data:', wordColorMappingArray);\n    };\n    // Call the function and pass the room code\n    retrieveData(joinCode);\n  };\n  const renderGrid = () => {\n    if (wordColorMapping === null) {\n      console.log('wordColorMapping is still null, cannot render the grid yet');\n      return null;\n    }\n    if (wordColorMapping.length !== 25) {\n      console.log(\"wordColorMapping is not populated\");\n      return null; // Return null if wordColorMapping is not yet populated\n    }\n\n    console.log(joinCode);\n    const grid = [];\n    let rowIndex = 0;\n    for (let i = 0; i < 25; i += 5) {\n      const row = [];\n      for (let j = i; j < i + 5; j++) {\n        const {\n          word,\n          color\n        } = wordColorMapping[j];\n        let cellStyle = {\n          backgroundColor: 'white',\n          boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)'\n        };\n        if (spymasterMode) {\n          cellStyle.backgroundColor = color === 'neutral' ? word === 'black' ? 'black' : 'lightgrey' : color;\n          cellStyle.color = 'white';\n        } else if (clickedCells[j]) {\n          cellStyle.backgroundColor = color === 'neutral' ? word === 'black' ? 'black' : 'lightgrey' : color;\n          cellStyle.color = 'white';\n        }\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          style: cellStyle,\n          onClick: () => handleCellClick(j),\n          children: word\n        }, j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this));\n      }\n      grid.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this));\n      rowIndex++;\n    }\n    return grid;\n  };\n  const handleToggleSpymasterMode = () => {\n    console.log(clickedCells);\n    setSpymasterMode(!spymasterMode);\n  };\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pregame\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pregame-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewGame,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"join-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinGame,\n            children: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"text\",\n            placeholder: \"Code\",\n            name: \"code\",\n            onChange: e => setJoinCode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Game Room: \", joinCode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Remaining Words\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 30\n          }, this), \"Blue: \", remainingBlueWords, \" | Red: \", remainingRedWords]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"codenames-board\",\n          children: wordColorMapping.length === 25 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"codenames-grid\",\n            children: renderGrid()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNewGame,\n            children: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleToggleSpymasterMode,\n            children: \"Spymaster Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this), initiateSocketingComponent && /*#__PURE__*/_jsxDEV(SocketingComponent, {\n            wordColorMapping: wordColorMapping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Turn: \", currentTurn]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 27\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: winnerMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"ATmL2GEl1DmPeNEU2FFgO/3+CGU=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","SocketingComponent","io","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","codeEntered","setCodeEntered","joinCode","setJoinCode","clickedCells","setClickedCells","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameStarted","setGameStarted","gameOver","setGameOver","spymasterMode","setSpymasterMode","winner","setWinner","winnerMessage","setWinnerMessage","fetchingData","setFetchingData","initiateSocketingComponent","setInitiateSocketingComponent","BLUE_WORD_COUNT","RED_WORD_COUNT","fetchWordColorMapping","response","fetch","ok","Error","status","statusText","data","json","room","wordColorMappingArray","Promise","all","Object","entries","word_color_mapping","map","_ref","word","color","socket","emit","error","console","length","log","renderGrid","handleCellClick","index","updatedClickedCells","prevTurn","handleNewGame","handleJoinGame","fetchAndRenderBoard","retrieveData","_ref2","grid","rowIndex","i","row","j","cellStyle","backgroundColor","boxShadow","push","className","style","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","handleToggleSpymasterMode","calculateRemainingWords","teamScore","totalWords","remainingBlueWords","remainingRedWords","type","placeholder","name","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport SocketingComponent from './SocketingComponent';\nimport io from 'socket.io-client';\n\n\nconst CodeNames = () => {\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  const [codeEntered, setCodeEntered] = useState('');\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false)\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [fetchingData, setFetchingData] = useState(true);\n  const [initiateSocketingComponent, setInitiateSocketingComponent] = useState(false);\n\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n\n  // Create the Word Color Mapping for the first time\n  const fetchWordColorMapping = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch word color mapping. Status: ${response.status} - ${response.statusText}`);\n      }\n      const data = await response.json();\n      setJoinCode(data.room)\n      const wordColorMappingArray = await Promise.all(\n        Object.entries(data.word_color_mapping).map(async ([word, color]) => {\n          return { word, color };\n        })\n      );\n      setWordColorMapping(wordColorMappingArray)\n      const socket = io();\n      socket.emit('wordColorMapping', { word_color_mapping: wordColorMappingArray },\n        'room', joinCode);\n    } catch (error) {\n      console.error('Error fetching word color mapping:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (wordColorMapping.length === 25) {\n      console.log(\"This is useEffect. Render the grid!\")\n      renderGrid();\n    }\n  }, [fetchingData, wordColorMapping]);\n\n  const handleCellClick = (index) => {\n    if (gameOver || (spymasterMode && clickedCells[index])) {\n      return;\n    }\n\n    if (clickedCells[index]) {\n      return; // Cell has already been clicked\n    }\n\n    if (spymasterMode) {\n      return; // Disallow cell click in Spymaster Mode\n    }\n\n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n\n    if (wordColorMapping.length === 25) {\n      const { color } = wordColorMapping[index];\n\n      if (color === 'black') {\n        if (currentTurn === 'blue') {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n        } else {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n        }\n        setGameOver(true);\n      } else if (color === 'blue') {\n        setBlueScore(blueScore + 1);\n        if (blueScore + 1 === BLUE_WORD_COUNT) {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n          setGameOver(true);\n        }\n      } else if (color === 'red') {\n        setRedScore(redScore + 1);\n        if (redScore + 1 === RED_WORD_COUNT) {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n          setGameOver(true);\n        }\n      }\n      if (currentTurn !== color && color !== 'black') {\n        setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n      }\n    }\n  };\n\n  const handleNewGame = () => {\n    setFetchingData(true);\n    fetchWordColorMapping();\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n    setInitiateSocketingComponent(true);\n    setFetchingData(false);\n  };\n\n  const handleJoinGame = async () => {\n    setFetchingData(true);\n    setGameStarted(true);\n    await fetchAndRenderBoard(joinCode);\n    renderGrid();\n    setInitiateSocketingComponent(true);\n\n    setFetchingData(false);\n  };\n\n  const fetchAndRenderBoard = async (joinCode) => {\n    const retrieveData = async (joinCode) => {\n      const response = await fetch(`http://127.0.0.1:5000/retrieve_data?room_code=${joinCode}`);\n      const data = await response.json();\n      const wordColorMappingArray = await Promise.all(\n        Object.entries(data.word_color_mapping).map(async ([word, color]) => {\n          return { word, color };\n        })\n      );\n      setWordColorMapping(wordColorMappingArray)\n      console.log('Retrieved data:', wordColorMappingArray);\n    };\n    // Call the function and pass the room code\n    retrieveData(joinCode);\n  };\n\n  const renderGrid = () => {\n    if (wordColorMapping === null) {\n      console.log('wordColorMapping is still null, cannot render the grid yet');\n      return null;\n    }\n\n    if (wordColorMapping.length !== 25) {\n      console.log(\"wordColorMapping is not populated\");\n      return null; // Return null if wordColorMapping is not yet populated\n    }\n    console.log(joinCode)\n    const grid = [];\n    let rowIndex = 0;\n\n    for (let i = 0; i < 25; i += 5) {\n      const row = [];\n      for (let j = i; j < i + 5; j++) {\n        const { word, color } = wordColorMapping[j];\n        let cellStyle = {\n          backgroundColor: 'white',\n          boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n        };\n\n        if (spymasterMode) {\n          cellStyle.backgroundColor =\n            color === 'neutral' ? (word === 'black' ? 'black' : 'lightgrey') : color;\n          cellStyle.color = 'white';\n        } else if (clickedCells[j]) {\n          cellStyle.backgroundColor =\n            color === 'neutral' ? (word === 'black' ? 'black' : 'lightgrey') : color;\n          cellStyle.color = 'white';\n        }\n\n        row.push(\n          <div\n            key={j}\n            className=\"box\"\n            style={cellStyle}\n            onClick={() => handleCellClick(j)}\n          >\n            {word}\n          </div>\n        );\n      }\n\n      grid.push(\n        <div key={rowIndex} className=\"grid-row\">\n          {row}\n        </div>\n      );\n\n      rowIndex++;\n    }\n\n    return grid;\n  };\n\n  const handleToggleSpymasterMode = () => {\n    console.log(clickedCells)\n    setSpymasterMode(!spymasterMode);\n  };\n\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n\n  return (\n\n    <div className=\"codenames\">\n\n      <h1>Code Names</h1>\n\n      {!gameStarted &&\n        <div className=\"pregame\">\n          <div className=\"pregame-buttons\">\n            <button onClick={handleNewGame}>Create Game</button>\n            <div className=\"join-game\">\n              <button onClick={handleJoinGame}>Join Game</button>\n              <input className=\"input\" type=\"text\" placeholder=\"Code\" name=\"code\" onChange={(e) => setJoinCode(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n      }\n\n      {gameStarted &&\n        <div>\n          <h2>Game Room: {joinCode}</h2>\n          <div>\n            <h4>\n              Remaining Words<br />\n              Blue: {remainingBlueWords} | Red: {remainingRedWords}\n            </h4>\n            <div className=\"codenames-board\">\n              {wordColorMapping.length === 25 &&\n                <div className=\"codenames-grid\">{renderGrid()}</div>}\n            </div>\n            <div>\n              <button onClick={handleNewGame}>Create Game</button>\n              <button onClick={handleToggleSpymasterMode}>Spymaster Mode</button>\n              {initiateSocketingComponent && <SocketingComponent wordColorMapping={wordColorMapping} />}\n            </div>\n            {!gameOver && <h4>Turn: {currentTurn}</h4>}\n            {gameOver && <h4>{winnerMessage}</h4>}\n          </div>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default CodeNames;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,cAAc;AACrB,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,IAAI,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,MAAM,CAAC;EACtD,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC0B,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAAC4B,MAAM,EAAEC,SAAS,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAAC8B,aAAa,EAAEC,gBAAgB,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgC,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkC,0BAA0B,EAAEC,6BAA6B,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EAEnF,MAAMoC,eAAe,GAAG,CAAC;EACzB,MAAMC,cAAc,GAAG,CAAC;;EAExB;EACA,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;MAE1E,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,+CAA8CH,QAAQ,CAACI,MAAO,MAAKJ,QAAQ,CAACK,UAAW,EAAC,CAAC;MAC5G;MACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE;MAClCjC,WAAW,CAACgC,IAAI,CAACE,IAAI,CAAC;MACtB,MAAMC,qBAAqB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7CC,MAAM,CAACC,OAAO,CAACP,IAAI,CAACQ,kBAAkB,CAAC,CAACC,GAAG,CAAC,MAAAC,IAAA,IAAyB;QAAA,IAAlB,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAAF,IAAA;QAC9D,OAAO;UAAEC,IAAI;UAAEC;QAAM,CAAC;MACxB,CAAC,CAAC,CACH;MACDhD,mBAAmB,CAACuC,qBAAqB,CAAC;MAC1C,MAAMU,MAAM,GAAGvD,EAAE,EAAE;MACnBuD,MAAM,CAACC,IAAI,CAAC,kBAAkB,EAAE;QAAEN,kBAAkB,EAAEL;MAAsB,CAAC,EAC3E,MAAM,EAAEpC,QAAQ,CAAC;IACrB,CAAC,CAAC,OAAOgD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF,CAAC;EAED3D,SAAS,CAAC,MAAM;IACd,IAAIO,gBAAgB,CAACsD,MAAM,KAAK,EAAE,EAAE;MAClCD,OAAO,CAACE,GAAG,CAAC,qCAAqC,CAAC;MAClDC,UAAU,EAAE;IACd;EACF,CAAC,EAAE,CAAChC,YAAY,EAAExB,gBAAgB,CAAC,CAAC;EAEpC,MAAMyD,eAAe,GAAIC,KAAK,IAAK;IACjC,IAAI1C,QAAQ,IAAKE,aAAa,IAAIZ,YAAY,CAACoD,KAAK,CAAE,EAAE;MACtD;IACF;IAEA,IAAIpD,YAAY,CAACoD,KAAK,CAAC,EAAE;MACvB,OAAO,CAAC;IACV;;IAEA,IAAIxC,aAAa,EAAE;MACjB,OAAO,CAAC;IACV;;IAEA,MAAMyC,mBAAmB,GAAG,CAAC,GAAGrD,YAAY,CAAC;IAC7CqD,mBAAmB,CAACD,KAAK,CAAC,GAAG,IAAI;IACjCnD,eAAe,CAACoD,mBAAmB,CAAC;IAEpC,IAAI3D,gBAAgB,CAACsD,MAAM,KAAK,EAAE,EAAE;MAClC,MAAM;QAAEL;MAAM,CAAC,GAAGjD,gBAAgB,CAAC0D,KAAK,CAAC;MAEzC,IAAIT,KAAK,KAAK,OAAO,EAAE;QACrB,IAAIzC,WAAW,KAAK,MAAM,EAAE;UAC1Ba,SAAS,CAAC,KAAK,CAAC;UAChBE,gBAAgB,CAAC,WAAW,CAAC;QAC/B,CAAC,MAAM;UACLF,SAAS,CAAC,MAAM,CAAC;UACjBE,gBAAgB,CAAC,YAAY,CAAC;QAChC;QACAN,WAAW,CAAC,IAAI,CAAC;MACnB,CAAC,MAAM,IAAIgC,KAAK,KAAK,MAAM,EAAE;QAC3BtC,YAAY,CAACD,SAAS,GAAG,CAAC,CAAC;QAC3B,IAAIA,SAAS,GAAG,CAAC,KAAKkB,eAAe,EAAE;UACrCP,SAAS,CAAC,MAAM,CAAC;UACjBE,gBAAgB,CAAC,YAAY,CAAC;UAC9BN,WAAW,CAAC,IAAI,CAAC;QACnB;MACF,CAAC,MAAM,IAAIgC,KAAK,KAAK,KAAK,EAAE;QAC1BpC,WAAW,CAACD,QAAQ,GAAG,CAAC,CAAC;QACzB,IAAIA,QAAQ,GAAG,CAAC,KAAKiB,cAAc,EAAE;UACnCR,SAAS,CAAC,KAAK,CAAC;UAChBE,gBAAgB,CAAC,WAAW,CAAC;UAC7BN,WAAW,CAAC,IAAI,CAAC;QACnB;MACF;MACA,IAAIT,WAAW,KAAKyC,KAAK,IAAIA,KAAK,KAAK,OAAO,EAAE;QAC9CxC,cAAc,CAAEmD,QAAQ,IAAMA,QAAQ,KAAK,MAAM,GAAG,KAAK,GAAG,MAAO,CAAC;MACtE;IACF;EACF,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1BpC,eAAe,CAAC,IAAI,CAAC;IACrBK,qBAAqB,EAAE;IACvBrB,cAAc,CAAC,MAAM,CAAC;IACtBE,YAAY,CAAC,CAAC,CAAC;IACfE,WAAW,CAAC,CAAC,CAAC;IACdI,WAAW,CAAC,KAAK,CAAC;IAClBF,cAAc,CAAC,IAAI,CAAC;IACpBY,6BAA6B,CAAC,IAAI,CAAC;IACnCF,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,MAAMqC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCrC,eAAe,CAAC,IAAI,CAAC;IACrBV,cAAc,CAAC,IAAI,CAAC;IACpB,MAAMgD,mBAAmB,CAAC3D,QAAQ,CAAC;IACnCoD,UAAU,EAAE;IACZ7B,6BAA6B,CAAC,IAAI,CAAC;IAEnCF,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,MAAMsC,mBAAmB,GAAG,MAAO3D,QAAQ,IAAK;IAC9C,MAAM4D,YAAY,GAAG,MAAO5D,QAAQ,IAAK;MACvC,MAAM2B,QAAQ,GAAG,MAAMC,KAAK,CAAE,iDAAgD5B,QAAS,EAAC,CAAC;MACzF,MAAMiC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE;MAClC,MAAME,qBAAqB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7CC,MAAM,CAACC,OAAO,CAACP,IAAI,CAACQ,kBAAkB,CAAC,CAACC,GAAG,CAAC,MAAAmB,KAAA,IAAyB;QAAA,IAAlB,CAACjB,IAAI,EAAEC,KAAK,CAAC,GAAAgB,KAAA;QAC9D,OAAO;UAAEjB,IAAI;UAAEC;QAAM,CAAC;MACxB,CAAC,CAAC,CACH;MACDhD,mBAAmB,CAACuC,qBAAqB,CAAC;MAC1Ca,OAAO,CAACE,GAAG,CAAC,iBAAiB,EAAEf,qBAAqB,CAAC;IACvD,CAAC;IACD;IACAwB,YAAY,CAAC5D,QAAQ,CAAC;EACxB,CAAC;EAED,MAAMoD,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIxD,gBAAgB,KAAK,IAAI,EAAE;MAC7BqD,OAAO,CAACE,GAAG,CAAC,4DAA4D,CAAC;MACzE,OAAO,IAAI;IACb;IAEA,IAAIvD,gBAAgB,CAACsD,MAAM,KAAK,EAAE,EAAE;MAClCD,OAAO,CAACE,GAAG,CAAC,mCAAmC,CAAC;MAChD,OAAO,IAAI,CAAC,CAAC;IACf;;IACAF,OAAO,CAACE,GAAG,CAACnD,QAAQ,CAAC;IACrB,MAAM8D,IAAI,GAAG,EAAE;IACf,IAAIC,QAAQ,GAAG,CAAC;IAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,CAAC,EAAE;MAC9B,MAAMC,GAAG,GAAG,EAAE;MACd,KAAK,IAAIC,CAAC,GAAGF,CAAC,EAAEE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,EAAE,EAAE;QAC9B,MAAM;UAAEtB,IAAI;UAAEC;QAAM,CAAC,GAAGjD,gBAAgB,CAACsE,CAAC,CAAC;QAC3C,IAAIC,SAAS,GAAG;UACdC,eAAe,EAAE,OAAO;UACxBC,SAAS,EAAE;QACb,CAAC;QAED,IAAIvD,aAAa,EAAE;UACjBqD,SAAS,CAACC,eAAe,GACvBvB,KAAK,KAAK,SAAS,GAAID,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,WAAW,GAAIC,KAAK;UAC1EsB,SAAS,CAACtB,KAAK,GAAG,OAAO;QAC3B,CAAC,MAAM,IAAI3C,YAAY,CAACgE,CAAC,CAAC,EAAE;UAC1BC,SAAS,CAACC,eAAe,GACvBvB,KAAK,KAAK,SAAS,GAAID,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,WAAW,GAAIC,KAAK;UAC1EsB,SAAS,CAACtB,KAAK,GAAG,OAAO;QAC3B;QAEAoB,GAAG,CAACK,IAAI,eACN7E,OAAA;UAEE8E,SAAS,EAAC,KAAK;UACfC,KAAK,EAAEL,SAAU;UACjBM,OAAO,EAAEA,CAAA,KAAMpB,eAAe,CAACa,CAAC,CAAE;UAAAQ,QAAA,EAEjC9B;QAAI,GALAsB,CAAC;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAMF,CACP;MACH;MAEAhB,IAAI,CAACQ,IAAI,eACP7E,OAAA;QAAoB8E,SAAS,EAAC,UAAU;QAAAG,QAAA,EACrCT;MAAG,GADIF,QAAQ;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAEZ,CACP;MAEDf,QAAQ,EAAE;IACZ;IAEA,OAAOD,IAAI;EACb,CAAC;EAED,MAAMiB,yBAAyB,GAAGA,CAAA,KAAM;IACtC9B,OAAO,CAACE,GAAG,CAACjD,YAAY,CAAC;IACzBa,gBAAgB,CAAC,CAACD,aAAa,CAAC;EAClC,CAAC;EAED,MAAMkE,uBAAuB,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAK;IACzD,OAAOA,UAAU,GAAGD,SAAS;EAC/B,CAAC;EAED,MAAME,kBAAkB,GAAGH,uBAAuB,CAAC1E,SAAS,EAAEkB,eAAe,CAAC;EAC9E,MAAM4D,iBAAiB,GAAGJ,uBAAuB,CAACxE,QAAQ,EAAEiB,cAAc,CAAC;EAE3E,oBAEEhC,OAAA;IAAK8E,SAAS,EAAC,WAAW;IAAAG,QAAA,gBAExBjF,OAAA;MAAAiF,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAElB,CAACpE,WAAW,iBACXjB,OAAA;MAAK8E,SAAS,EAAC,SAAS;MAAAG,QAAA,eACtBjF,OAAA;QAAK8E,SAAS,EAAC,iBAAiB;QAAAG,QAAA,gBAC9BjF,OAAA;UAAQgF,OAAO,EAAEhB,aAAc;UAAAiB,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eACpDrF,OAAA;UAAK8E,SAAS,EAAC,WAAW;UAAAG,QAAA,gBACxBjF,OAAA;YAAQgF,OAAO,EAAEf,cAAe;YAAAgB,QAAA,EAAC;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eACnDrF,OAAA;YAAO8E,SAAS,EAAC,OAAO;YAACc,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC,MAAM;YAACC,IAAI,EAAC,MAAM;YAACC,QAAQ,EAAGC,CAAC,IAAKxF,WAAW,CAACwF,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAC/G;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF,EAGPpE,WAAW,iBACVjB,OAAA;MAAAiF,QAAA,gBACEjF,OAAA;QAAAiF,QAAA,GAAI,aAAW,EAAC1E,QAAQ;MAAA;QAAA2E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAC9BrF,OAAA;QAAAiF,QAAA,gBACEjF,OAAA;UAAAiF,QAAA,GAAI,iBACa,eAAAjF,OAAA;YAAAkF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,UACf,EAACK,kBAAkB,EAAC,UAAQ,EAACC,iBAAiB;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACjD,eACLrF,OAAA;UAAK8E,SAAS,EAAC,iBAAiB;UAAAG,QAAA,EAC7B9E,gBAAgB,CAACsD,MAAM,KAAK,EAAE,iBAC7BzD,OAAA;YAAK8E,SAAS,EAAC,gBAAgB;YAAAG,QAAA,EAAEtB,UAAU;UAAE;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAO;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAClD,eACNrF,OAAA;UAAAiF,QAAA,gBACEjF,OAAA;YAAQgF,OAAO,EAAEhB,aAAc;YAAAiB,QAAA,EAAC;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eACpDrF,OAAA;YAAQgF,OAAO,EAAEM,yBAA0B;YAAAL,QAAA,EAAC;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,EAClExD,0BAA0B,iBAAI7B,OAAA,CAACH,kBAAkB;YAACM,gBAAgB,EAAEA;UAAiB;YAAA+E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAG;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACrF,EACL,CAAClE,QAAQ,iBAAInB,OAAA;UAAAiF,QAAA,GAAI,QAAM,EAACtE,WAAW;QAAA;UAAAuE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,EACzClE,QAAQ,iBAAInB,OAAA;UAAAiF,QAAA,EAAKxD;QAAa;UAAAyD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEJ;AAEV,CAAC;AAACnF,EAAA,CA1PID,SAAS;AAAAkG,EAAA,GAATlG,SAAS;AA4Pf,eAAeA,SAAS;AAAC,IAAAkG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}