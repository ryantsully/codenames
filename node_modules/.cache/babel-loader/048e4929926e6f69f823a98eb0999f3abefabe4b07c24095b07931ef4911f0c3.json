{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/lab/src/pages/CodeNames.jsx\";\nimport React from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateRandomWord() {\n  const words = ['Apple', 'Banana', 'Cherry', 'Durian', 'Elderberry', 'Fig', 'Grape', 'Honeydew', 'Imbu', 'Jackfruit', 'Kiwi', 'Lemon', 'Mango', 'Nectarine', 'Orange', 'Pineapple', 'Quince', 'Raspberry', 'Strawberry', 'Tangerine', 'Flower', 'Twig', 'Cactus'];\n  return words[Math.floor(Math.random() * words.length)];\n}\n\n// makeGrid = async () => {\n//     fetch(\"api/start_codenames_game\")\n//     .then(response => response.json())\n//     .then(data => this.setState({\n//         word_color_mapping: data.word_color_mapping\n//     }))\n// }\n\n//   function MyGrid() {\n//     const gridItems = [];\n\n//     for (let i = 0; i < 25; i++) {\n//       gridItems.push(\n//         <div className=\"box\" key={i}>\n//           {generateRandomWord()}\n//         </div>\n//       );\n//     }\n//     return <div className=\"grid\">{gridItems}</div>;\n// }\n\nconst CodeNames = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Spymaster Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }, this);\n};\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","generateRandomWord","words","Math","floor","random","length","CodeNames","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/lab/src/pages/CodeNames.jsx"],"sourcesContent":["import React from 'react';\nimport '../index.css';\n\nfunction generateRandomWord() {\n    const words = [\n      'Apple', 'Banana', 'Cherry', 'Durian', 'Elderberry',\n      'Fig', 'Grape', 'Honeydew', 'Imbu', 'Jackfruit',\n      'Kiwi', 'Lemon', 'Mango', 'Nectarine', 'Orange',\n      'Pineapple', 'Quince', 'Raspberry', 'Strawberry', 'Tangerine',\n      'Flower', 'Twig', 'Cactus', \n    ];\n  \n    return words[Math.floor(Math.random() * words.length)];\n  }\n\n// makeGrid = async () => {\n//     fetch(\"api/start_codenames_game\")\n//     .then(response => response.json())\n//     .then(data => this.setState({\n//         word_color_mapping: data.word_color_mapping\n//     }))\n// }\n\n//   function MyGrid() {\n//     const gridItems = [];\n  \n//     for (let i = 0; i < 25; i++) {\n//       gridItems.push(\n//         <div className=\"box\" key={i}>\n//           {generateRandomWord()}\n//         </div>\n//       );\n//     }\n//     return <div className=\"grid\">{gridItems}</div>;\n// }\n\nconst CodeNames = () => {\n    return (\n      <div className=\"codenames\">\n        <h1>Code Names</h1>\n        <body>\n            {/* {this.state.word_color_mapping} */}\n        {/* <MyGrid /> */}\n        </body>\n\n        <button> New Game</button>\n        <button> Spymaster Mode</button>\n      </div>\n    );\n  };\n\nexport default CodeNames;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,kBAAkBA,CAAA,EAAG;EAC1B,MAAMC,KAAK,GAAG,CACZ,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EACnD,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,WAAW,EAC/C,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAC/C,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,YAAY,EAAE,WAAW,EAC7D,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAC3B;EAED,OAAOA,KAAK,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGH,KAAK,CAACI,MAAM,CAAC,CAAC;AACxD;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,oBACEP,OAAA;IAAKQ,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBT,OAAA;MAAAS,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACnBb,OAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAGO,eAEPb,OAAA;MAAAS,QAAA,EAAQ;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eAC1Bb,OAAA;MAAAS,QAAA,EAAQ;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC5B;AAEV,CAAC;AAACC,EAAA,GAbEP,SAAS;AAef,eAAeA,SAAS;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}