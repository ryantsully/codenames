{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  let [words, setWords] = useState([]);\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n  const createGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/create_new_game`);\n      if (!response) {\n        throw new Error('Create game didnt work');\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n    } catch (error) {\n      console.log(\"There was an error with create new game\");\n    }\n  };\n  const joinGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/join_game/${joinCode}`);\n      if (!response) {\n        throw new Error('Join didnt work');\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n      setWords(Object.keys(wordColorMapping['word_color_mapping']));\n      console.log(wordColorMapping);\n    } catch (error) {\n      console.log(\"There was an error with join game\");\n    }\n  };\n  const updateGridOnServer = async updatedWordColorMapping => {\n    try {\n      fetch(`http://127.0.0.1:5000/click_event/${joinCode}`), {\n        method: \"POST\"\n      };\n      if (!response) {\n        throw new Error('Join didnt work');\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n      createGrid(data);\n    } catch (error) {\n      console.log(\"There was an error with retrieving updated grid from server\");\n    }\n  };\n\n  // const updateGridOnServer = async (updatedWordColorMapping) => {\n  //   try {\n  //     const response = await fetch(`http://127.0.0.1:5000/click_event/${joinCode}`)\n  //     if (!response) {\n  //       throw new Error('Join didnt work')\n  //     }\n  //     const data = await response.json();\n  //     setWordColorMapping(data);\n  //     createGrid(data)\n  //   }\n  //   catch (error) {\n  //     console.log(\"There was an error with retrieving updated grid from server\")\n  //   }\n  // }\n\n  useEffect(() => {\n    if (wordColorMapping.length !== 0) {\n      console.log(\"Game info retrieved from server\");\n      setWords(Object.keys(wordColorMapping['word_color_mapping']));\n      setJoinCode(wordColorMapping['room_code']);\n      createGrid(wordColorMapping);\n    }\n  }, [wordColorMapping]);\n  function getKeyByPosition(obj, position) {\n    for (const key in obj) {\n      if (obj[key].position === position) {\n        return key;\n      }\n    }\n    return null;\n  }\n  function createGrid(wordColorMapping) {\n    const numRows = 5;\n    const numColumns = 5;\n    const grid = [];\n    for (let row = 0; row < numRows; row++) {\n      // Loop through the rows\n      const rowCells = [];\n      for (let column = 0; column < numColumns; column++) {\n        let key = row + 1 + column * 5;\n        let word = getKeyByPosition(wordColorMapping['word_color_mapping'], key);\n        let color = wordColorMapping['word_color_mapping'][word].color;\n        let clicked = wordColorMapping['word_color_mapping'][word].clicked;\n        let cellStyle = {\n          backgroundColor: 'white',\n          boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)'\n        };\n        if (spymasterMode || clicked) {\n          cellStyle.backgroundColor = color === 'neutral' ? color === 'black' ? 'black' : 'lightgrey' : color;\n          cellStyle.color = 'white';\n        }\n        const cell = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          style: cellStyle,\n          onClick: () => handleCellClick(key),\n          children: word\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 22\n        }, this); // Create a cell\n        rowCells.push(cell); //Add Cell to row\n      }\n\n      grid.push(rowCells); //Add row to grid\n    }\n\n    return grid;\n  }\n  const handleCellClick = index => {\n    if (gameOver || spymasterMode || clickedCells[index]) {\n      console.log(\"cell\", index, \"clicked! Do nothing since game over, spymaster mode, or cell already clicked\");\n      return;\n    }\n    const updatedWordColorMapping = {\n      ...wordColorMapping\n    };\n    let word = getKeyByPosition(wordColorMapping['word_color_mapping'], index);\n    let color = wordColorMapping['word_color_mapping'][word].color;\n    wordColorMapping['word_color_mapping'][word].clicked = true;\n    updateGridOnServer(updatedWordColorMapping);\n    setWordColorMapping(updatedWordColorMapping);\n    setClickedCells(index);\n    if (color === 'black') {\n      if (currentTurn === 'blue') {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n      } else {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n      }\n      setGameOver(true);\n    } else if (color === 'blue') {\n      setBlueScore(blueScore + 1);\n      if (blueScore + 1 === BLUE_WORD_COUNT) {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n        setGameOver(true);\n      }\n    } else if (color === 'red') {\n      setRedScore(redScore + 1);\n      if (redScore + 1 === RED_WORD_COUNT) {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n        setGameOver(true);\n      }\n    }\n    if (currentTurn !== color && color !== 'black') {\n      setCurrentTurn(prevTurn => prevTurn === 'blue' ? 'red' : 'blue');\n    }\n  };\n  const handleNewGame = async () => {\n    createGame();\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n  };\n  const handleJoinGame = async () => {\n    joinGame(joinCode);\n    setGameStarted(true);\n  };\n  const handleToggleSpymasterMode = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenames\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pregame\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pregame-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewGame,\n          children: \"Create Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"join-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinGame,\n            children: \"Join Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"text\",\n            placeholder: \"Code\",\n            name: \"code\",\n            onChange: e => setJoinCode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Game Room: \", joinCode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Remaining Words\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 30\n          }, this), \"Blue: \", remainingBlueWords, \" | Red: \", remainingRedWords]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"codenames-board\",\n          children: words.length === 25 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"codenames-grid\",\n            children: createGrid(wordColorMapping)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNewGame,\n            children: \"Create Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleToggleSpymasterMode,\n            children: \"Spymaster Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Turn: \", currentTurn]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 27\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: winnerMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeNames, \"JfaIrPYcXlc5rj6pO47PIbkxg4A=\");\n_c = CodeNames;\nexport default CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","words","setWords","joinCode","setJoinCode","clickedCells","setClickedCells","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameStarted","setGameStarted","gameOver","setGameOver","spymasterMode","setSpymasterMode","winner","setWinner","winnerMessage","setWinnerMessage","BLUE_WORD_COUNT","RED_WORD_COUNT","createGame","response","fetch","Error","data","json","error","console","log","joinGame","Object","keys","updateGridOnServer","updatedWordColorMapping","method","createGrid","length","getKeyByPosition","obj","position","key","numRows","numColumns","grid","row","rowCells","column","word","color","clicked","cellStyle","backgroundColor","boxShadow","cell","className","style","onClick","handleCellClick","children","fileName","_jsxFileName","lineNumber","columnNumber","push","index","prevTurn","handleNewGame","handleJoinGame","handleToggleSpymasterMode","calculateRemainingWords","teamScore","totalWords","remainingBlueWords","remainingRedWords","type","placeholder","name","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/ryans_workshop/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\n\nconst CodeNames = () => {\n  let [wordColorMapping, setWordColorMapping] = useState([]);\n  let [words, setWords] = useState([]);\n  const [joinCode, setJoinCode] = useState('');\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false)\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n\n  const BLUE_WORD_COUNT = 8;\n  const RED_WORD_COUNT = 7;\n\n  const createGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/create_new_game`)\n      if (!response) {\n        throw new Error('Create game didnt work')\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n    }\n    catch (error) {\n      console.log(\"There was an error with create new game\")\n    }\n  }\n\n  const joinGame = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/join_game/${joinCode}`)\n      if (!response) {\n        throw new Error('Join didnt work')\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n      setWords(Object.keys(wordColorMapping['word_color_mapping']))\n      console.log(wordColorMapping)\n\n    }\n    catch (error) {\n      console.log(\"There was an error with join game\")\n    }\n  }\n\n  const updateGridOnServer = async (updatedWordColorMapping) => {\n    try {\n      fetch(`http://127.0.0.1:5000/click_event/${joinCode}`), {\n        method: \"POST\"\n      }\n      if (!response) {\n        throw new Error('Join didnt work')\n      }\n      const data = await response.json();\n      setWordColorMapping(data);\n      createGrid(data)\n    }\n    catch (error) {\n      console.log(\"There was an error with retrieving updated grid from server\")\n    }\n  }\n\n\n  // const updateGridOnServer = async (updatedWordColorMapping) => {\n  //   try {\n  //     const response = await fetch(`http://127.0.0.1:5000/click_event/${joinCode}`)\n  //     if (!response) {\n  //       throw new Error('Join didnt work')\n  //     }\n  //     const data = await response.json();\n  //     setWordColorMapping(data);\n  //     createGrid(data)\n  //   }\n  //   catch (error) {\n  //     console.log(\"There was an error with retrieving updated grid from server\")\n  //   }\n  // }\n\n  useEffect(() => {\n    if (wordColorMapping.length !== 0) {\n      console.log(\"Game info retrieved from server\")\n      setWords(Object.keys(wordColorMapping['word_color_mapping']))\n      setJoinCode(wordColorMapping['room_code'])\n      createGrid(wordColorMapping)\n    }\n  }, [wordColorMapping]);\n\n  function getKeyByPosition(obj, position) {\n    for (const key in obj) {\n      if (obj[key].position === position) {\n        return key;\n      }\n    }\n    return null;\n  }\n\n  function createGrid(wordColorMapping) {\n    const numRows = 5;\n    const numColumns = 5;\n    const grid = [];\n    for (let row = 0; row < numRows; row++) {     // Loop through the rows\n      const rowCells = [];\n      for (let column = 0; column < numColumns; column++) {\n        let key = (row + 1) + (column * 5)\n        let word = getKeyByPosition(wordColorMapping['word_color_mapping'], key)\n        let color = wordColorMapping['word_color_mapping'][word].color\n        let clicked = wordColorMapping['word_color_mapping'][word].clicked\n        let cellStyle = {\n          backgroundColor: 'white',\n          boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\n        };\n        if (spymasterMode || clicked) {\n          cellStyle.backgroundColor =\n            color === 'neutral' ? (color === 'black' ? 'black' : 'lightgrey') : color;\n          cellStyle.color = 'white';\n        }\n        const cell = <div key={key}\n          className=\"box\"\n          style={cellStyle}\n          onClick={() => handleCellClick(key)}>\n          {word}</div>; // Create a cell\n        rowCells.push(cell); //Add Cell to row\n      }\n      grid.push(rowCells); //Add row to grid\n    }\n    return grid\n  }\n\n  const handleCellClick = (index) => {\n    if (gameOver || spymasterMode || clickedCells[index]) {\n      console.log(\"cell\", index, \"clicked! Do nothing since game over, spymaster mode, or cell already clicked\")\n      return;\n    }\n    const updatedWordColorMapping = { ...wordColorMapping }\n    let word = getKeyByPosition(wordColorMapping['word_color_mapping'], index)\n    let color = wordColorMapping['word_color_mapping'][word].color\n    wordColorMapping['word_color_mapping'][word].clicked = true\n    updateGridOnServer(updatedWordColorMapping)\n    setWordColorMapping(updatedWordColorMapping)\n    setClickedCells(index)\n\n    if (color === 'black') {\n      if (currentTurn === 'blue') {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n      } else {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n      }\n      setGameOver(true);\n    } else if (color === 'blue') {\n      setBlueScore(blueScore + 1);\n      if (blueScore + 1 === BLUE_WORD_COUNT) {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n        setGameOver(true);\n      }\n    } else if (color === 'red') {\n      setRedScore(redScore + 1);\n      if (redScore + 1 === RED_WORD_COUNT) {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n        setGameOver(true);\n      }\n    }\n    if (currentTurn !== color && color !== 'black') {\n      setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n    }\n  };\n\n  const handleNewGame = async () => {\n    createGame();\n    setCurrentTurn('blue');\n    setBlueScore(0);\n    setRedScore(0);\n    setGameOver(false);\n    setGameStarted(true);\n  };\n\n  const handleJoinGame = async () => {\n    joinGame(joinCode)\n    setGameStarted(true);\n  };\n\n  const handleToggleSpymasterMode = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n\n  const calculateRemainingWords = (teamScore, totalWords) => {\n    return totalWords - teamScore;\n  };\n\n  const remainingBlueWords = calculateRemainingWords(blueScore, BLUE_WORD_COUNT);\n  const remainingRedWords = calculateRemainingWords(redScore, RED_WORD_COUNT);\n\n  return (\n\n    <div className=\"codenames\">\n\n      <h1>Code Names</h1>\n\n      {!gameStarted &&\n        <div className=\"pregame\">\n          <div className=\"pregame-buttons\">\n            <button onClick={handleNewGame}>Create Game</button>\n            <div className=\"join-game\">\n              <button onClick={handleJoinGame}>Join Game</button>\n              <input className=\"input\" type=\"text\" placeholder=\"Code\" name=\"code\" onChange={(e) => setJoinCode(e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n      }\n\n      {gameStarted &&\n        <div>\n          <h2>Game Room: {joinCode}</h2>\n          <div>\n            <h4>\n              Remaining Words<br />\n              Blue: {remainingBlueWords} | Red: {remainingRedWords}\n            </h4>\n\n            <div className=\"codenames-board\">\n              {words.length === 25 &&\n                <div className=\"codenames-grid\">{createGrid(wordColorMapping)}</div>\n              }\n            </div>\n\n            <div>\n              <button onClick={handleNewGame}>Create Game</button>\n              <button onClick={handleToggleSpymasterMode}>Spymaster Mode</button>\n            </div>\n            {!gameOver && <h4>Turn: {currentTurn}</h4>}\n            {gameOver && <h4>{winnerMessage}</h4>}\n          </div>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default CodeNames;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}