{"ast":null,"code":"var _jsxFileName = \"/Users/ryansullivan/Desktop/lab/src/pages/CodeNames.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeNames = () => {\n  _s();\n  const [wordColorMapping, setWordColorMapping] = useState([]);\n  const [clickedCells, setClickedCells] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('blue');\n  const [blueScore, setBlueScore] = useState(0);\n  const [redScore, setRedScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [spymasterMode, setSpymasterMode] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  useEffect(() => {\n    fetchWordColorMapping();\n  }, []);\n  const fetchWordColorMapping = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n      const data = await response.json();\n      console.log('Response:', data);\n      const wordColorMappingArray = Object.entries(data).map(_ref => {\n        let [word, color] = _ref;\n        return {\n          word,\n          color\n        };\n      });\n      setWordColorMapping(wordColorMappingArray);\n      setClickedCells(new Array(25).fill(false));\n      setCurrentTurn('blue');\n      setBlueScore(0);\n      setRedScore(0);\n      setGameOver(false);\n      setSpymasterMode(false);\n      setWinner(null);\n      setWinnerMessage('');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleCellClick = index => {\n    if (gameOver || spymasterMode && clickedCells[index]) {\n      return;\n    }\n    const updatedClickedCells = [...clickedCells];\n    updatedClickedCells[index] = true;\n    setClickedCells(updatedClickedCells);\n    const {\n      color\n    } = wordColorMapping[index];\n    if (color === 'black') {\n      if (currentTurn === 'blue') {\n        setWinner('red');\n        setWinnerMessage('Red Wins!');\n      } else {\n        setWinner('blue');\n        setWinnerMessage('Blue Wins!');\n      }\n      setGameOver(true);\n    } else if (color === 'blue' && currentTurn === 'blue') {\n      setBlueScore(blueScore + 1);\n    } else if (color === 'red' && currentTurn === 'red') {\n      setRedScore(redScore + 1);\n    }\n    setCurrentTurn(prevTurn => prevTurn === 'blue' ? 'red' : 'blue');\n  };\n  const handleNewGame = () => {\n    fetchWordColorMapping();\n  };\n  const handleToggleSpymasterMode = () => {\n    setSpymasterMode(!spymasterMode);\n  };\n  const renderGrid = () => {\n    if (wordColorMapping.length !== 25) {\n      return null;\n    }\n    const grid = [];\n    let rowIndex = 0;\n    for (let i = 0; i < 25; i += 5) {\n      const row = [];\n      for (let j = i; j < i + 5; j++) {\n        const {\n          word,\n          color\n        } = wordColorMapping[j];\n        let cellStyle = {\n          backgroundColor: 'transparent'\n        };\n        if (spymasterMode) {\n          cellStyle.backgroundColor = color === 'neutral' ? word === 'black' ? 'black' : 'lightgrey' : color;\n        } else if (clickedCells[j]) {\n          cellStyle.backgroundColor = color === 'neutral' ? word === 'black' ? 'black' : 'lightgrey' : color;\n        }\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          style: cellStyle,\n          onClick: () => handleCellClick(j),\n          children: word\n        }, j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this));\n      }\n      grid.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this));\n      rowIndex++;\n    }\n    return grid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNewGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleSpymasterMode,\n        children: \"Spymaster Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Turn: \", currentTurn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: winnerMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Blue Score: \", blueScore, \" | Red Score: \", redScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: renderGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 7\n  }, this);\n};\n_s(CodeNames, \"eIUhG5XaJFPTtVx6daagvI4x1+E=\");\n_c = CodeNames;\nvar _c;\n$RefreshReg$(_c, \"CodeNames\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CodeNames","_s","wordColorMapping","setWordColorMapping","clickedCells","setClickedCells","currentTurn","setCurrentTurn","blueScore","setBlueScore","redScore","setRedScore","gameOver","setGameOver","spymasterMode","setSpymasterMode","winner","setWinner","winnerMessage","setWinnerMessage","fetchWordColorMapping","response","fetch","data","json","console","log","wordColorMappingArray","Object","entries","map","_ref","word","color","Array","fill","error","handleCellClick","index","updatedClickedCells","prevTurn","handleNewGame","handleToggleSpymasterMode","renderGrid","length","grid","rowIndex","i","row","j","cellStyle","backgroundColor","push","className","style","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryansullivan/Desktop/lab/src/pages/CodeNames.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../index.css';\n\nconst CodeNames = () => {\n    const [wordColorMapping, setWordColorMapping] = useState([]);\n    const [clickedCells, setClickedCells] = useState([]);\n    const [currentTurn, setCurrentTurn] = useState('blue');\n    const [blueScore, setBlueScore] = useState(0);\n    const [redScore, setRedScore] = useState(0);\n    const [gameOver, setGameOver] = useState(false);\n    const [spymasterMode, setSpymasterMode] = useState(false);\n    const [winner, setWinner] = useState(null);\n    const [winnerMessage, setWinnerMessage] = useState('');\n  \n    useEffect(() => {\n      fetchWordColorMapping();\n    }, []);\n  \n    const fetchWordColorMapping = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/start_codenames_game');\n        const data = await response.json();\n        console.log('Response:', data);\n  \n        const wordColorMappingArray = Object.entries(data).map(([word, color]) => ({\n          word,\n          color,\n        }));\n        setWordColorMapping(wordColorMappingArray);\n        setClickedCells(new Array(25).fill(false));\n        setCurrentTurn('blue');\n        setBlueScore(0);\n        setRedScore(0);\n        setGameOver(false);\n        setSpymasterMode(false);\n        setWinner(null);\n        setWinnerMessage('');\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  \n    const handleCellClick = (index) => {\n      if (gameOver || (spymasterMode && clickedCells[index])) {\n        return;\n      }\n  \n      const updatedClickedCells = [...clickedCells];\n      updatedClickedCells[index] = true;\n      setClickedCells(updatedClickedCells);\n  \n      const { color } = wordColorMapping[index];\n  \n      if (color === 'black') {\n        if (currentTurn === 'blue') {\n          setWinner('red');\n          setWinnerMessage('Red Wins!');\n        } else {\n          setWinner('blue');\n          setWinnerMessage('Blue Wins!');\n        }\n        setGameOver(true);\n      } else if (color === 'blue' && currentTurn === 'blue') {\n        setBlueScore(blueScore + 1);\n      } else if (color === 'red' && currentTurn === 'red') {\n        setRedScore(redScore + 1);\n      }\n  \n      setCurrentTurn((prevTurn) => (prevTurn === 'blue' ? 'red' : 'blue'));\n    };\n  \n    const handleNewGame = () => {\n      fetchWordColorMapping();\n    };\n  \n    const handleToggleSpymasterMode = () => {\n      setSpymasterMode(!spymasterMode);\n    };\n  \n    const renderGrid = () => {\n      if (wordColorMapping.length !== 25) {\n        return null;\n      }\n  \n      const grid = [];\n      let rowIndex = 0;\n  \n      for (let i = 0; i < 25; i += 5) {\n        const row = [];\n  \n        for (let j = i; j < i + 5; j++) {\n          const { word, color } = wordColorMapping[j];\n  \n          let cellStyle = {\n            backgroundColor: 'transparent',\n          };\n  \n          if (spymasterMode) {\n            cellStyle.backgroundColor =\n              color === 'neutral' ? (word === 'black' ? 'black' : 'lightgrey') : color;\n          } else if (clickedCells[j]) {\n            cellStyle.backgroundColor =\n              color === 'neutral' ? (word === 'black' ? 'black' : 'lightgrey') : color;\n          }\n  \n          row.push(\n            <div\n              key={j}\n              className=\"box\"\n              style={cellStyle}\n              onClick={() => handleCellClick(j)}\n            >\n              {word}\n            </div>\n          );\n        }\n  \n        grid.push(\n          <div key={rowIndex} className=\"grid-row\">\n            {row}\n          </div>\n        );\n  \n        rowIndex++;\n      }\n  \n      return grid;\n    };\n  \n    return (\n      <div>\n        <div>\n          <button onClick={handleNewGame}>New Game</button>\n          <button onClick={handleToggleSpymasterMode}>Spymaster Mode</button>\n          <div>Turn: {currentTurn}</div>\n          {gameOver && <div>{winnerMessage}</div>}\n          <div>\n            Blue Score: {blueScore} | Red Score: {redScore}\n          </div>\n        </div>\n        <div className=\"grid-container\">{renderGrid()}</div>\n      </div>\n    );\n  };\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}